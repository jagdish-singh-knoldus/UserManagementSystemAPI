# Coverage data, format version: 2.0
# Statement data:
# - id
# - source path
# - package name
# - class name
# - class type (Class, Object or Trait)
# - full class name
# - method name
# - start offset
# - end offset
# - line number
# - symbol name
# - tree name
# - is branch
# - invocations count
# - is ignored
# - description (can be multi-line)
# '' sign
# ------------------------------------------
1
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1491
1508
39
com.usermanagement.crud.actor.UserActor.getAllUserDetails
Apply
false
0
false
UserActor.this.getAllUserDetails()

2
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1526
1534
40
akka.actor.Actor.sender
Apply
false
0
false
UserActor.this.sender()

3
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1525
1525
40
akka.actor.Actor.self
Select
false
0
false
UserActor.this.self

4
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1515
1535
40
akka.pattern.PipeToSupport.PipeableFuture.pipeTo
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.pipe[com.usermanagement.crud.models.APIDataResponse](res)(scala.concurrent.ExecutionContext.Implicits.global).pipeTo(UserActor.this.sender())(UserActor.this.self)

5
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1525
1525
40
<nosymbol>
Literal
false
0
false
()

6
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1599
1628
42
com.usermanagement.crud.actor.UserActor.validateUserIdForUser
Apply
false
0
false
UserActor.this.validateUserIdForUser(userId)

7
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1646
1654
43
akka.actor.Actor.sender
Apply
false
0
false
UserActor.this.sender()

8
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1645
1645
43
akka.actor.Actor.self
Select
false
0
false
UserActor.this.self

9
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1635
1655
43
akka.pattern.PipeToSupport.PipeableFuture.pipeTo
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.pipe[com.usermanagement.crud.actor.UserActor.Valid](res)(scala.concurrent.ExecutionContext.Implicits.global).pipeTo(UserActor.this.sender())(UserActor.this.self)

10
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1645
1645
43
<nosymbol>
Literal
false
0
false
()

11
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1739
1772
45
com.usermanagement.crud.actor.UserActor.validateUserTpe
Apply
false
0
false
UserActor.this.validateUserTpe(userId, userType)

12
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1790
1798
46
akka.actor.Actor.sender
Apply
false
0
false
UserActor.this.sender()

13
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1789
1789
46
akka.actor.Actor.self
Select
false
0
false
UserActor.this.self

14
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1779
1799
46
akka.pattern.PipeToSupport.PipeableFuture.pipeTo
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.pipe[com.usermanagement.crud.actor.UserActor.Valid](res)(scala.concurrent.ExecutionContext.Implicits.global).pipeTo(UserActor.this.sender())(UserActor.this.self)

15
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1789
1789
46
<nosymbol>
Literal
false
0
false
()

16
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1876
1906
48
com.usermanagement.crud.actor.UserActor.insertUserDetails
Apply
false
0
false
UserActor.this.insertUserDetails(userDetails)

17
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1924
1932
49
akka.actor.Actor.sender
Apply
false
0
false
UserActor.this.sender()

18
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1923
1923
49
akka.actor.Actor.self
Select
false
0
false
UserActor.this.self

19
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1913
1933
49
akka.pattern.PipeToSupport.PipeableFuture.pipeTo
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.pipe[com.usermanagement.crud.models.APIDataResponse](res)(scala.concurrent.ExecutionContext.Implicits.global).pipeTo(UserActor.this.sender())(UserActor.this.self)

20
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1923
1923
49
<nosymbol>
Literal
false
0
false
()

21
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
2113
2160
53
com.usermanagement.crud.actor.UserActor.updateAdminUsername
Apply
false
0
false
UserActor.this.updateAdminUsername(userId, username, userType)

22
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
2178
2186
54
akka.actor.Actor.sender
Apply
false
0
false
UserActor.this.sender()

23
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
2177
2177
54
akka.actor.Actor.self
Select
false
0
false
UserActor.this.self

24
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
2167
2187
54
akka.pattern.PipeToSupport.PipeableFuture.pipeTo
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.pipe[com.usermanagement.crud.models.APIDataResponse](res)(scala.concurrent.ExecutionContext.Implicits.global).pipeTo(UserActor.this.sender())(UserActor.this.self)

25
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
2177
2177
54
<nosymbol>
Literal
false
0
false
()

26
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
2265
2293
56
com.usermanagement.crud.actor.UserActor.deleteUser
Apply
false
0
false
UserActor.this.deleteUser(userId, userType)

27
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
2311
2319
57
akka.actor.Actor.sender
Apply
false
0
false
UserActor.this.sender()

28
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
2310
2310
57
akka.actor.Actor.self
Select
false
0
false
UserActor.this.self

29
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
2300
2320
57
akka.pattern.PipeToSupport.PipeableFuture.pipeTo
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.pipe[com.usermanagement.crud.models.APIDataResponse](res)(scala.concurrent.ExecutionContext.Implicits.global).pipeTo(UserActor.this.sender())(UserActor.this.self)

30
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
2310
2310
57
<nosymbol>
Literal
false
0
false
()

31
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
receive
1439
1439
37
com.usermanagement.crud.actor.UserActor.$anonfun.<init>
Apply
false
0
false
new $anonfun()

32
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
getAllUserDetails
2568
2581
68
com.usermanagement.crud.actor.UserActor.NoDataFound.apply
Apply
false
0
false
UserActor.NoDataFound.apply()

33
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
getAllUserDetails
2609
2636
70
com.usermanagement.crud.actor.UserActor.GetUserDetailsSuccess.apply
Apply
false
0
false
UserActor.GetUserDetailsSuccess.apply(data)

34
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
getAllUserDetails
2479
2642
65
scala.concurrent.Future.map
ApplyToImplicitArgs
false
0
false
UserActor.this.userDAO.getAllUsers.map[com.usermanagement.crud.models.APIDataResponse](((x0$1: Seq[com.usermanagement.crud.dao.UserDetails]) => x0$1 match {
  case scala.collection.immutable.Nil => {
    (if (UserActor.this.logger.underlying.isInfoEnabled())
      UserActor.this.logger.underlying.info("No data Found")
    else
      (): Unit);
    UserActor.NoDataFound.apply()
  }
  case (data @ _) => UserActor.GetUserDetailsSuccess.apply(data)
}))(scala.concurrent.ExecutionContext.Implicits.global)

35
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
validateUserIdForUser
2881
2890
82
scala.Int.>
Apply
false
0
false
count.>(0)

36
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
validateUserIdForUser
2875
2891
82
com.usermanagement.crud.actor.UserActor.Valid.apply
Apply
false
0
false
UserActor.Valid.apply(count.>(0))

37
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
validateUserIdForUser
2817
2892
82
scala.concurrent.Future.map
ApplyToImplicitArgs
false
0
false
UserActor.this.userDAO.validateUserId(userId).map[com.usermanagement.crud.actor.UserActor.Valid](((count: Int) => UserActor.Valid.apply(count.>(0))))(scala.concurrent.ExecutionContext.Implicits.global)

38
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
validateUserTpe
3175
3184
93
scala.Int.>
Apply
false
0
false
count.>(0)

39
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
validateUserTpe
3169
3185
93
com.usermanagement.crud.actor.UserActor.Valid.apply
Apply
false
0
false
UserActor.Valid.apply(count.>(0))

40
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
validateUserTpe
3099
3186
93
scala.concurrent.Future.map
ApplyToImplicitArgs
false
0
false
UserActor.this.userDAO.validateUserType(userId, userType).map[com.usermanagement.crud.actor.UserActor.Valid](((count: Int) => UserActor.Valid.apply(count.>(0))))(scala.concurrent.ExecutionContext.Implicits.global)

41
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
insertUserDetails
3478
3506
104
<nosymbol>
Literal
false
0
false
"User created successfully."

42
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
insertUserDetails
3508
3526
104
com.usermanagement.crud.dao.UserDetails.userId
Select
false
0
false
userDetails.userId

43
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
insertUserDetails
3463
3527
104
com.usermanagement.crud.actor.UserActor.CommandSuccess.apply
Apply
false
0
false
UserActor.CommandSuccess.apply("User created successfully.", userDetails.userId)

44
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
insertUserDetails
3552
3591
106
com.usermanagement.crud.actor.UserActor.CommandFailure.apply
Apply
false
0
false
UserActor.CommandFailure.apply("User creation failed!")

45
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
insertUserDetails
3401
3597
102
scala.concurrent.Future.map
ApplyToImplicitArgs
false
0
false
UserActor.this.userDAO.createUser(userDetails).map[com.usermanagement.crud.models.APIDataResponse](((x0$2: Int) => x0$2 match {
  case 1 => UserActor.CommandSuccess.apply("User created successfully.", userDetails.userId)
  case 0 => UserActor.CommandFailure.apply("User creation failed!")
}))(scala.concurrent.ExecutionContext.Implicits.global)

46
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
updateAdminUsername
4040
4078
122
<nosymbol>
Literal
false
0
false
"Admin username updated successfully."

47
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
updateAdminUsername
4080
4092
122
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](userId)

48
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
updateAdminUsername
4025
4093
122
com.usermanagement.crud.actor.UserActor.CommandSuccess.apply
Apply
false
0
false
UserActor.CommandSuccess.apply("Admin username updated successfully.", scala.Some.apply[String](userId))

49
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
updateAdminUsername
4118
4167
124
com.usermanagement.crud.actor.UserActor.CommandFailure.apply
Apply
false
0
false
UserActor.CommandFailure.apply("Admin username updation failed!")

50
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
updateAdminUsername
3944
4173
120
scala.concurrent.Future.map
ApplyToImplicitArgs
false
0
false
UserActor.this.userDAO.updateUsername(userId, username, userType).map[com.usermanagement.crud.models.APIDataResponse](((x0$3: Int) => x0$3 match {
  case 1 => UserActor.CommandSuccess.apply("Admin username updated successfully.", scala.Some.apply[String](userId))
  case 0 => UserActor.CommandFailure.apply("Admin username updation failed!")
}))(scala.concurrent.ExecutionContext.Implicits.global)

51
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
deleteUser
4501
4533
138
<nosymbol>
Literal
false
0
false
"Customer deleted successfully."

52
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
deleteUser
4535
4547
138
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](userId)

53
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
deleteUser
4486
4548
138
com.usermanagement.crud.actor.UserActor.CommandSuccess.apply
Apply
false
0
false
UserActor.CommandSuccess.apply("Customer deleted successfully.", scala.Some.apply[String](userId))

54
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
deleteUser
4573
4616
140
com.usermanagement.crud.actor.UserActor.CommandFailure.apply
Apply
false
0
false
UserActor.CommandFailure.apply("Customer deletion failed!")

55
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Class
com.usermanagement.crud.actor.UserActor
deleteUser
4419
4622
136
scala.concurrent.Future.map
ApplyToImplicitArgs
false
0
false
UserActor.this.userDAO.deleteUser(userId, userType).map[com.usermanagement.crud.models.APIDataResponse](((x0$4: Int) => x0$4 match {
  case 1 => UserActor.CommandSuccess.apply("Customer deleted successfully.", scala.Some.apply[String](userId))
  case 0 => UserActor.CommandFailure.apply("Customer deletion failed!")
}))(scala.concurrent.ExecutionContext.Implicits.global)

56
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Object
com.usermanagement.crud.actor.UserActor
props
5942
5964
184
com.usermanagement.crud.actor.UserActor.<init>
ApplyToImplicitArgs
false
0
false
new UserActor(userDAO)(futureAwaitDuration)

57
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/actor/UserActor.scala
com.usermanagement.crud.actor
UserActor
Object
com.usermanagement.crud.actor.UserActor
props
5936
5965
184
akka.actor.Props.apply
ApplyToImplicitArgs
false
0
false
akka.actor.Props.apply[com.usermanagement.crud.actor.UserActor](new UserActor(userDAO)(futureAwaitDuration))((ClassTag.apply[com.usermanagement.crud.actor.UserActor](classOf[com.usermanagement.crud.actor.UserActor]): scala.reflect.ClassTag[com.usermanagement.crud.actor.UserActor]))

58
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
createUser
1266
1283
37
slick.jdbc.JdbcActionComponent.SimpleInsertActionComposer.+=
Apply
false
0
false
slick.jdbc.MySQLProfile.api.queryInsertActionExtensionMethods[com.usermanagement.crud.dao.UserDetailsTable#TableElementType, Seq](UserDAO.this.userQuery).+=(user)

59
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
createUser
1259
1284
37
slick.basic.BasicBackend.DatabaseDef.run
Apply
false
0
false
UserDAO.this.db.run[Int](slick.jdbc.MySQLProfile.api.queryInsertActionExtensionMethods[com.usermanagement.crud.dao.UserDetailsTable#TableElementType, Seq](UserDAO.this.userQuery).+=(user))

60
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1490
1500
48
com.usermanagement.crud.dao.UserDetailsTable.userId
Select
false
0
false
col.userId

61
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1494
1494
48
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

62
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1505
1505
48
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

63
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1505
1511
48
slick.relational.RelationalProfile.API.valueToConstColumn
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType)

64
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1501
1501
48
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

65
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1501
1501
48
slick.lifted.OptionMapper2.getOptionMapper2OT
ApplyToImplicitArgs
false
0
false
lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)

66
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1490
1511
48
slick.lifted.ColumnExtensionMethods.===
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))

67
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1482
1482
48
slick.lifted.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition
Select
false
0
false
lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition

68
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1457
1526
49
slick.lifted.Query.size
Select
false
0
false
UserDAO.this.userQuery.filter[slick.lifted.Rep[Option[Boolean]]](((col: com.usermanagement.crud.dao.UserDetailsTable) => slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))))(lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition).size

69
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1522
1522
49
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.intColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.intColumnType

70
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1522
1522
49
slick.lifted.RepShapeImplicits.repColumnShape
ApplyToImplicitArgs
false
0
false
lifted.this.Shape.repColumnShape[Int, Nothing](slick.jdbc.MySQLProfile.api.intColumnType)

71
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1457
1542
50
slick.jdbc.JdbcActionComponent.QueryActionExtensionMethodsImpl.result
Select
false
0
false
slick.jdbc.MySQLProfile.api.recordQueryActionExtensionMethods[slick.lifted.Rep[Int], Int](UserDAO.this.userQuery.filter[slick.lifted.Rep[Option[Boolean]]](((col: com.usermanagement.crud.dao.UserDetailsTable) => slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))))(lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition).size)(lifted.this.Shape.repColumnShape[Int, Nothing](slick.jdbc.MySQLProfile.api.intColumnType)).result

72
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserId
1443
1543
46
slick.basic.BasicBackend.DatabaseDef.run
Apply
false
0
false
UserDAO.this.db.run[Int](slick.jdbc.MySQLProfile.api.recordQueryActionExtensionMethods[slick.lifted.Rep[Int], Int](UserDAO.this.userQuery.filter[slick.lifted.Rep[Option[Boolean]]](((col: com.usermanagement.crud.dao.UserDetailsTable) => slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))))(lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition).size)(lifted.this.Shape.repColumnShape[Int, Nothing](slick.jdbc.MySQLProfile.api.intColumnType)).result)

73
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1792
1802
62
com.usermanagement.crud.dao.UserDetailsTable.userId
Select
false
0
false
col.userId

74
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1796
1796
62
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

75
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1807
1807
62
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

76
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1807
1813
62
slick.relational.RelationalProfile.API.valueToConstColumn
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType)

77
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1803
1803
62
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

78
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1803
1803
62
slick.lifted.OptionMapper2.getOptionMapper2OT
ApplyToImplicitArgs
false
0
false
lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)

79
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1792
1813
62
slick.lifted.ColumnExtensionMethods.===
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))

80
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1817
1829
62
com.usermanagement.crud.dao.UserDetailsTable.userType
Select
false
0
false
col.userType

81
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1821
1821
62
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

82
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1834
1834
62
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

83
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1834
1842
62
slick.relational.RelationalProfile.API.valueToConstColumn
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType)

84
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1830
1830
62
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

85
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1830
1830
62
slick.lifted.OptionMapper2.getOptionMapper2TT
ApplyToImplicitArgs
false
0
false
lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)

86
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1817
1842
62
slick.lifted.ColumnExtensionMethods.===
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.columnExtensionMethods[String](col.userType)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Boolean](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))

87
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1814
1814
62
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.booleanColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.booleanColumnType

88
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1814
1814
62
slick.lifted.OptionMapper2.getOptionMapper2OT
ApplyToImplicitArgs
false
0
false
lifted.this.OptionMapper2.getOptionMapper2OT[Boolean, Boolean, Boolean, Boolean](slick.jdbc.MySQLProfile.api.booleanColumnType)

89
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1792
1842
62
slick.lifted.BooleanColumnExtensionMethods.&&
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.booleanOptionColumnExtensionMethods(slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))).&&[Boolean, Option[Boolean]](slick.jdbc.MySQLProfile.api.columnExtensionMethods[String](col.userType)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Boolean](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)))(lifted.this.OptionMapper2.getOptionMapper2OT[Boolean, Boolean, Boolean, Boolean](slick.jdbc.MySQLProfile.api.booleanColumnType))

90
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1784
1784
62
slick.lifted.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition
Select
false
0
false
lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition

91
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1759
1857
63
slick.lifted.Query.size
Select
false
0
false
UserDAO.this.userQuery.filter[slick.lifted.Rep[Option[Boolean]]](((col: com.usermanagement.crud.dao.UserDetailsTable) => slick.jdbc.MySQLProfile.api.booleanOptionColumnExtensionMethods(slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))).&&[Boolean, Option[Boolean]](slick.jdbc.MySQLProfile.api.columnExtensionMethods[String](col.userType)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Boolean](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)))(lifted.this.OptionMapper2.getOptionMapper2OT[Boolean, Boolean, Boolean, Boolean](slick.jdbc.MySQLProfile.api.booleanColumnType))))(lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition).size

92
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1853
1853
63
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.intColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.intColumnType

93
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1853
1853
63
slick.lifted.RepShapeImplicits.repColumnShape
ApplyToImplicitArgs
false
0
false
lifted.this.Shape.repColumnShape[Int, Nothing](slick.jdbc.MySQLProfile.api.intColumnType)

94
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1759
1873
64
slick.jdbc.JdbcActionComponent.QueryActionExtensionMethodsImpl.result
Select
false
0
false
slick.jdbc.MySQLProfile.api.recordQueryActionExtensionMethods[slick.lifted.Rep[Int], Int](UserDAO.this.userQuery.filter[slick.lifted.Rep[Option[Boolean]]](((col: com.usermanagement.crud.dao.UserDetailsTable) => slick.jdbc.MySQLProfile.api.booleanOptionColumnExtensionMethods(slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))).&&[Boolean, Option[Boolean]](slick.jdbc.MySQLProfile.api.columnExtensionMethods[String](col.userType)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Boolean](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)))(lifted.this.OptionMapper2.getOptionMapper2OT[Boolean, Boolean, Boolean, Boolean](slick.jdbc.MySQLProfile.api.booleanColumnType))))(lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition).size)(lifted.this.Shape.repColumnShape[Int, Nothing](slick.jdbc.MySQLProfile.api.intColumnType)).result

95
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
validateUserType
1745
1874
60
slick.basic.BasicBackend.DatabaseDef.run
Apply
false
0
false
UserDAO.this.db.run[Int](slick.jdbc.MySQLProfile.api.recordQueryActionExtensionMethods[slick.lifted.Rep[Int], Int](UserDAO.this.userQuery.filter[slick.lifted.Rep[Option[Boolean]]](((col: com.usermanagement.crud.dao.UserDetailsTable) => slick.jdbc.MySQLProfile.api.booleanOptionColumnExtensionMethods(slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))).&&[Boolean, Option[Boolean]](slick.jdbc.MySQLProfile.api.columnExtensionMethods[String](col.userType)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Boolean](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)))(lifted.this.OptionMapper2.getOptionMapper2OT[Boolean, Boolean, Boolean, Boolean](slick.jdbc.MySQLProfile.api.booleanColumnType))))(lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition).size)(lifted.this.Shape.repColumnShape[Int, Nothing](slick.jdbc.MySQLProfile.api.intColumnType)).result)

96
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
updateUsername
2173
2330
83
slick.jdbc.JdbcActionComponent.UpdateActionExtensionMethodsImpl.update
Apply
false
0
false
slick.jdbc.MySQLProfile.api.queryUpdateActionExtensionMethods[String, Seq](UserDAO.this.userQuery.filter[slick.lifted.Rep[Option[Boolean]]](((col: com.usermanagement.crud.dao.UserDetailsTable) => slick.jdbc.MySQLProfile.api.booleanOptionColumnExtensionMethods(slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))).&&[Boolean, Option[Boolean]](slick.jdbc.MySQLProfile.api.columnExtensionMethods[String](col.userType)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Boolean](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)))(lifted.this.OptionMapper2.getOptionMapper2OT[Boolean, Boolean, Boolean, Boolean](slick.jdbc.MySQLProfile.api.booleanColumnType))))(lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition).map[slick.jdbc.MySQLProfile.api.Rep[String], slick.lifted.Rep[String], String](((x$1: com.usermanagement.crud.dao.UserDetailsTable) => x$1.userName))(lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType))).update(username)

97
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
updateUsername
2159
2331
77
slick.basic.BasicBackend.DatabaseDef.run
Apply
false
0
false
UserDAO.this.db.run[Int](slick.jdbc.MySQLProfile.api.queryUpdateActionExtensionMethods[String, Seq](UserDAO.this.userQuery.filter[slick.lifted.Rep[Option[Boolean]]](((col: com.usermanagement.crud.dao.UserDetailsTable) => slick.jdbc.MySQLProfile.api.booleanOptionColumnExtensionMethods(slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))).&&[Boolean, Option[Boolean]](slick.jdbc.MySQLProfile.api.columnExtensionMethods[String](col.userType)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Boolean](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)))(lifted.this.OptionMapper2.getOptionMapper2OT[Boolean, Boolean, Boolean, Boolean](slick.jdbc.MySQLProfile.api.booleanColumnType))))(lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition).map[slick.jdbc.MySQLProfile.api.Rep[String], slick.lifted.Rep[String], String](((x$1: com.usermanagement.crud.dao.UserDetailsTable) => x$1.userName))(lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType))).update(username))

98
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2573
2583
96
com.usermanagement.crud.dao.UserDetailsTable.userId
Select
false
0
false
col.userId

99
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2577
2577
96
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

100
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2588
2588
96
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

101
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2588
2594
96
slick.relational.RelationalProfile.API.valueToConstColumn
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType)

102
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2584
2584
96
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

103
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2584
2584
96
slick.lifted.OptionMapper2.getOptionMapper2OT
ApplyToImplicitArgs
false
0
false
lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)

104
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2573
2594
96
slick.lifted.ColumnExtensionMethods.===
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))

105
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2610
2622
97
com.usermanagement.crud.dao.UserDetailsTable.userType
Select
false
0
false
col.userType

106
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2614
2614
97
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

107
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2627
2627
97
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

108
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2627
2635
97
slick.relational.RelationalProfile.API.valueToConstColumn
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType)

109
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2623
2623
97
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

110
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2623
2623
97
slick.lifted.OptionMapper2.getOptionMapper2TT
ApplyToImplicitArgs
false
0
false
lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)

111
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2610
2635
97
slick.lifted.ColumnExtensionMethods.===
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.columnExtensionMethods[String](col.userType)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Boolean](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))

112
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2595
2595
96
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.booleanColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.booleanColumnType

113
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2595
2595
96
slick.lifted.OptionMapper2.getOptionMapper2OT
ApplyToImplicitArgs
false
0
false
lifted.this.OptionMapper2.getOptionMapper2OT[Boolean, Boolean, Boolean, Boolean](slick.jdbc.MySQLProfile.api.booleanColumnType)

114
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2573
2635
96
slick.lifted.BooleanColumnExtensionMethods.&&
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.booleanOptionColumnExtensionMethods(slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))).&&[Boolean, Option[Boolean]](slick.jdbc.MySQLProfile.api.columnExtensionMethods[String](col.userType)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Boolean](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)))(lifted.this.OptionMapper2.getOptionMapper2OT[Boolean, Boolean, Boolean, Boolean](slick.jdbc.MySQLProfile.api.booleanColumnType))

115
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2555
2555
95
slick.lifted.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition
Select
false
0
false
lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition

116
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2530
2636
95
slick.lifted.Query.filter
ApplyToImplicitArgs
false
0
false
UserDAO.this.userQuery.filter[slick.lifted.Rep[Option[Boolean]]](((col: com.usermanagement.crud.dao.UserDetailsTable) => slick.jdbc.MySQLProfile.api.booleanOptionColumnExtensionMethods(slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))).&&[Boolean, Option[Boolean]](slick.jdbc.MySQLProfile.api.columnExtensionMethods[String](col.userType)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Boolean](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)))(lifted.this.OptionMapper2.getOptionMapper2OT[Boolean, Boolean, Boolean, Boolean](slick.jdbc.MySQLProfile.api.booleanColumnType))))(lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition)

117
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2530
2652
98
slick.jdbc.JdbcActionComponent.DeleteActionExtensionMethodsImpl.delete
Select
false
0
false
slick.jdbc.MySQLProfile.api.queryDeleteActionExtensionMethods[Seq](UserDAO.this.userQuery.filter[slick.lifted.Rep[Option[Boolean]]](((col: com.usermanagement.crud.dao.UserDetailsTable) => slick.jdbc.MySQLProfile.api.booleanOptionColumnExtensionMethods(slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))).&&[Boolean, Option[Boolean]](slick.jdbc.MySQLProfile.api.columnExtensionMethods[String](col.userType)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Boolean](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)))(lifted.this.OptionMapper2.getOptionMapper2OT[Boolean, Boolean, Boolean, Boolean](slick.jdbc.MySQLProfile.api.booleanColumnType))))(lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition)).delete

118
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
deleteUser
2516
2653
93
slick.basic.BasicBackend.DatabaseDef.run
Apply
false
0
false
UserDAO.this.db.run[Int](slick.jdbc.MySQLProfile.api.queryDeleteActionExtensionMethods[Seq](UserDAO.this.userQuery.filter[slick.lifted.Rep[Option[Boolean]]](((col: com.usermanagement.crud.dao.UserDetailsTable) => slick.jdbc.MySQLProfile.api.booleanOptionColumnExtensionMethods(slick.jdbc.MySQLProfile.api.optionColumnExtensionMethods[String](col.userId)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Option[Boolean]](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userId)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2OT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType))).&&[Boolean, Option[Boolean]](slick.jdbc.MySQLProfile.api.columnExtensionMethods[String](col.userType)(slick.jdbc.MySQLProfile.api.stringColumnType).===[String, Boolean](slick.jdbc.MySQLProfile.api.valueToConstColumn[String](userType)(slick.jdbc.MySQLProfile.api.stringColumnType))(lifted.this.OptionMapper2.getOptionMapper2TT[String, String, String, Boolean](slick.jdbc.MySQLProfile.api.stringColumnType)))(lifted.this.OptionMapper2.getOptionMapper2OT[Boolean, Boolean, Boolean, Boolean](slick.jdbc.MySQLProfile.api.booleanColumnType))))(lifted.this.CanBeQueryCondition.BooleanOptionColumnCanBeQueryCondition)).delete)

119
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
getAllUsers
2802
2811
106
com.usermanagement.crud.dao.UserDAO.userQuery
Select
false
0
false
UserDAO.this.userQuery

120
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
getAllUsers
2802
2818
106
slick.jdbc.JdbcActionComponent.StreamingQueryActionExtensionMethodsImpl.result
Select
false
0
false
slick.jdbc.MySQLProfile.api.streamableQueryActionExtensionMethods[com.usermanagement.crud.dao.UserDetailsTable#TableElementType, Seq](UserDAO.this.userQuery).result

121
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDAO.scala
com.usermanagement.crud.dao
UserDAO
Class
com.usermanagement.crud.dao.UserDAO
getAllUsers
2795
2819
106
slick.basic.BasicBackend.DatabaseDef.run
Apply
false
0
false
UserDAO.this.db.run[Seq[com.usermanagement.crud.dao.UserDetailsTable#TableElementType]](slick.jdbc.MySQLProfile.api.streamableQueryActionExtensionMethods[com.usermanagement.crud.dao.UserDetailsTable#TableElementType, Seq](UserDAO.this.userQuery).result)

122
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
userId
1026
1035
24
<nosymbol>
Literal
false
0
false
"user_id"

123
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
userId
1025
1025
24
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

124
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
userId
1025
1025
24
slick.ast.TypedType.typedTypeToOptionTypedType
ApplyToImplicitArgs
false
0
false
ast.this.TypedType.typedTypeToOptionTypedType[String](slick.jdbc.MySQLProfile.api.stringColumnType)

125
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
userId
1003
1036
24
slick.relational.RelationalTableComponent.Table.column
ApplyToImplicitArgs
false
0
false
UserDetailsTable.this.column[Option[String]]("user_id")(ast.this.TypedType.typedTypeToOptionTypedType[String](slick.jdbc.MySQLProfile.api.stringColumnType))

126
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
userType
1082
1093
25
<nosymbol>
Literal
false
0
false
"user_type"

127
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
userType
1081
1081
25
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

128
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
userType
1067
1094
25
slick.relational.RelationalTableComponent.Table.column
ApplyToImplicitArgs
false
0
false
UserDetailsTable.this.column[String]("user_type")(slick.jdbc.MySQLProfile.api.stringColumnType)

129
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
name
1136
1142
26
<nosymbol>
Literal
false
0
false
"name"

130
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
name
1135
1135
26
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

131
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
name
1121
1143
26
slick.relational.RelationalTableComponent.Table.column
ApplyToImplicitArgs
false
0
false
UserDetailsTable.this.column[String]("name")(slick.jdbc.MySQLProfile.api.stringColumnType)

132
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
userName
1189
1199
27
<nosymbol>
Literal
false
0
false
"username"

133
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
userName
1188
1188
27
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

134
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
userName
1174
1200
27
slick.relational.RelationalTableComponent.Table.column
ApplyToImplicitArgs
false
0
false
UserDetailsTable.this.column[String]("username")(slick.jdbc.MySQLProfile.api.stringColumnType)

135
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1272
1278
31
com.usermanagement.crud.dao.UserDetailsTable.userId
Select
false
0
false
UserDetailsTable.this.userId

136
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1280
1288
31
com.usermanagement.crud.dao.UserDetailsTable.userType
Select
false
0
false
UserDetailsTable.this.userType

137
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1290
1294
31
com.usermanagement.crud.dao.UserDetailsTable.name
Select
false
0
false
UserDetailsTable.this.name

138
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1296
1304
31
com.usermanagement.crud.dao.UserDetailsTable.userName
Select
false
0
false
UserDetailsTable.this.userName

139
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1305
31
scala.Tuple4.apply
Apply
false
0
false
scala.Tuple4.apply[slick.jdbc.MySQLProfile.api.Rep[Option[String]], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String]](UserDetailsTable.this.userId, UserDetailsTable.this.userType, UserDetailsTable.this.name, UserDetailsTable.this.userName)

140
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1271
31
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

141
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1271
31
slick.lifted.RepShapeImplicits.repColumnShape
ApplyToImplicitArgs
false
0
false
lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType)

142
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1271
31
slick.lifted.RepShapeImplicits.optionShape
ApplyToImplicitArgs
false
0
false
lifted.this.Shape.optionShape[String, String, String, Nothing](lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType))

143
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1271
31
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

144
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1271
31
slick.lifted.RepShapeImplicits.repColumnShape
ApplyToImplicitArgs
false
0
false
lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType)

145
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1271
31
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

146
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1271
31
slick.lifted.RepShapeImplicits.repColumnShape
ApplyToImplicitArgs
false
0
false
lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType)

147
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1271
31
slick.jdbc.JdbcTypesComponent.ImplicitColumnTypes.stringColumnType
Select
false
0
false
slick.jdbc.MySQLProfile.api.stringColumnType

148
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1271
31
slick.lifted.RepShapeImplicits.repColumnShape
ApplyToImplicitArgs
false
0
false
lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType)

149
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1271
31
slick.lifted.TupleShapeImplicits.tuple4Shape
ApplyToImplicitArgs
false
0
false
lifted.this.Shape.tuple4Shape[slick.jdbc.MySQLProfile.api.FlatShapeLevel, slick.jdbc.MySQLProfile.api.Rep[Option[String]], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String], Option[String], String, String, String, slick.lifted.Rep[Option[String]], slick.lifted.Rep[String], slick.lifted.Rep[String], slick.lifted.Rep[String]](lifted.this.Shape.optionShape[String, String, String, Nothing](lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType)), lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType), lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType), lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType))

150
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1317
1335
31
scala.Function4.tupled
Select
false
0
false
UserDetails.tupled

151
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1337
1356
31
com.usermanagement.crud.dao.UserDetails.unapply
Apply
false
0
false
UserDetails.unapply(x$0)

152
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1357
31
slick.lifted.ShapedValue.<>
ApplyToImplicitArgs
false
0
false
slick.jdbc.MySQLProfile.api.anyToShapedValue[(slick.jdbc.MySQLProfile.api.Rep[Option[String]], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String]), (Option[String], String, String, String)](scala.Tuple4.apply[slick.jdbc.MySQLProfile.api.Rep[Option[String]], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String]](UserDetailsTable.this.userId, UserDetailsTable.this.userType, UserDetailsTable.this.name, UserDetailsTable.this.userName))(lifted.this.Shape.tuple4Shape[slick.jdbc.MySQLProfile.api.FlatShapeLevel, slick.jdbc.MySQLProfile.api.Rep[Option[String]], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String], Option[String], String, String, String, slick.lifted.Rep[Option[String]], slick.lifted.Rep[String], slick.lifted.Rep[String], slick.lifted.Rep[String]](lifted.this.Shape.optionShape[String, String, String, Nothing](lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType)), lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType), lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType), lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType))).shaped.<>[com.usermanagement.crud.dao.UserDetails](UserDetails.tupled, {
  ((x$0: com.usermanagement.crud.dao.UserDetails) => UserDetails.unapply(x$0))
})((ClassTag.apply[com.usermanagement.crud.dao.UserDetails](classOf[com.usermanagement.crud.dao.UserDetails]): scala.reflect.ClassTag[com.usermanagement.crud.dao.UserDetails]))

153
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1313
1313
31
slick.lifted.Shape.mappedProjectionShape
TypeApply
false
0
false
lifted.this.Shape.mappedProjectionShape[slick.lifted.FlatShapeLevel, com.usermanagement.crud.dao.UserDetails, (Option[String], String, String, String)]

154
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/dao/UserDetailsTable.scala
com.usermanagement.crud.dao
UserDetailsTable
Class
com.usermanagement.crud.dao.UserDetailsTable
*
1271
1357
31
slick.lifted.ProvenShape.proveShapeOf
ApplyToImplicitArgs
false
0
false
lifted.this.ProvenShape.proveShapeOf[slick.lifted.MappedProjection[com.usermanagement.crud.dao.UserDetails,(Option[String], String, String, String)], com.usermanagement.crud.dao.UserDetails](slick.jdbc.MySQLProfile.api.anyToShapedValue[(slick.jdbc.MySQLProfile.api.Rep[Option[String]], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String]), (Option[String], String, String, String)](scala.Tuple4.apply[slick.jdbc.MySQLProfile.api.Rep[Option[String]], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String]](UserDetailsTable.this.userId, UserDetailsTable.this.userType, UserDetailsTable.this.name, UserDetailsTable.this.userName))(lifted.this.Shape.tuple4Shape[slick.jdbc.MySQLProfile.api.FlatShapeLevel, slick.jdbc.MySQLProfile.api.Rep[Option[String]], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String], slick.jdbc.MySQLProfile.api.Rep[String], Option[String], String, String, String, slick.lifted.Rep[Option[String]], slick.lifted.Rep[String], slick.lifted.Rep[String], slick.lifted.Rep[String]](lifted.this.Shape.optionShape[String, String, String, Nothing](lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType)), lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType), lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType), lifted.this.Shape.repColumnShape[String, Nothing](slick.jdbc.MySQLProfile.api.stringColumnType))).shaped.<>[com.usermanagement.crud.dao.UserDetails](UserDetails.tupled, {
  ((x$0: com.usermanagement.crud.dao.UserDetails) => UserDetails.unapply(x$0))
})((ClassTag.apply[com.usermanagement.crud.dao.UserDetails](classOf[com.usermanagement.crud.dao.UserDetails]): scala.reflect.ClassTag[com.usermanagement.crud.dao.UserDetails])))(lifted.this.Shape.mappedProjectionShape[slick.lifted.FlatShapeLevel, com.usermanagement.crud.dao.UserDetails, (Option[String], String, String, String)])

155
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
939
960
28
akka.http.scaladsl.model.StatusCodes.NoContent
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.NoContent

156
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1014
1017
29
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

157
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1071
1087
30
akka.http.scaladsl.model.HttpEntity.Empty
Select
false
0
false
akka.http.scaladsl.model.HttpEntity.Empty

158
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1141
1165
31
akka.http.scaladsl.model.HttpProtocols.HTTP/1.1
Select
false
0
false
akka.http.scaladsl.model.HttpProtocols.HTTP/1.1

159
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
926
1166
28
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(akka.http.scaladsl.model.StatusCodes.NoContent, scala.collection.immutable.Nil, akka.http.scaladsl.model.HttpEntity.Empty, akka.http.scaladsl.model.HttpProtocols.HTTP/1.1)

160
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1192
1209
33
<nosymbol>
Literal
false
0
false
"INVALID_USER_ID"

161
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1236
1255
34
<nosymbol>
Literal
false
0
false
"INVALID_USER_TYPE"

162
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1281
1299
35
<nosymbol>
Literal
false
0
false
"INVALID_USERNAME"

163
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1334
1361
36
<nosymbol>
Literal
false
0
false
"INVALID_USER_ID_FOR_ADMIN"

164
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1399
1429
37
<nosymbol>
Literal
false
0
false
"INVALID_USER_ID_FOR_CUSTOMER"

165
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1452
1467
38
<nosymbol>
Literal
false
0
false
"GET_ALL_USERS"

166
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1496
1517
39
<nosymbol>
Literal
false
0
false
"INSERT_USER_DETAILS"

167
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1542
1559
40
<nosymbol>
Literal
false
0
false
"DELETE_CUSTOMER"

168
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1574
1581
41
<nosymbol>
Literal
false
0
false
"admin"

169
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/helper/Constants.scala
com.usermanagement.crud.helper
Constants
Trait
com.usermanagement.crud.helper.Constants
<none>
1599
1609
42
<nosymbol>
Literal
false
0
false
"customer"

170
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1234
1256
38
akka.http.scaladsl.model.StatusCodes.BadRequest
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.BadRequest

171
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1233
1262
38
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ClientError, String](akka.http.scaladsl.model.StatusCodes.BadRequest, msg)

172
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1233
1233
38
scala.Predef.$conforms
TypeApply
false
0
false
scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ClientError]

173
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1233
1233
38
akka.http.scaladsl.marshalling.PredefinedToEntityMarshallers.StringMarshaller
Select
false
0
false
marshalling.this.Marshaller.StringMarshaller

174
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1233
1233
38
akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromStatusCodeAndValue
ApplyToImplicitArgs
false
0
false
marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ClientError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ClientError], marshalling.this.Marshaller.StringMarshaller)

175
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1233
1262
38
akka.http.scaladsl.marshalling.ToResponseMarshallable.apply
ApplyToImplicitArgs
false
0
false
marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ClientError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ClientError, String](akka.http.scaladsl.model.StatusCodes.BadRequest, msg))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ClientError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ClientError], marshalling.this.Marshaller.StringMarshaller))

176
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1224
1263
38
akka.http.scaladsl.server.directives.RouteDirectives.complete
Apply
false
0
false
akka.http.scaladsl.server.directives.RouteDirectives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ClientError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ClientError, String](akka.http.scaladsl.model.StatusCodes.BadRequest, msg))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ClientError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ClientError], marshalling.this.Marshaller.StringMarshaller)))

177
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1164
1164
36
com.usermanagement.crud.models.HandleRejection.$anonfun.<init>
Apply
false
0
false
new $anonfun()

178
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1352
1374
42
akka.http.scaladsl.model.StatusCodes.BadRequest
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.BadRequest

179
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1351
1380
42
scala.Tuple2.apply
Apply
false
0
false
scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ClientError, String](akka.http.scaladsl.model.StatusCodes.BadRequest, msg)

180
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1351
1351
42
scala.Predef.$conforms
TypeApply
false
0
false
scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ClientError]

181
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1351
1351
42
akka.http.scaladsl.marshalling.PredefinedToEntityMarshallers.StringMarshaller
Select
false
0
false
marshalling.this.Marshaller.StringMarshaller

182
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1351
1351
42
akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromStatusCodeAndValue
ApplyToImplicitArgs
false
0
false
marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ClientError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ClientError], marshalling.this.Marshaller.StringMarshaller)

183
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1351
1380
42
akka.http.scaladsl.marshalling.ToResponseMarshallable.apply
ApplyToImplicitArgs
false
0
false
marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ClientError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ClientError, String](akka.http.scaladsl.model.StatusCodes.BadRequest, msg))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ClientError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ClientError], marshalling.this.Marshaller.StringMarshaller))

184
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1342
1381
42
akka.http.scaladsl.server.directives.RouteDirectives.complete
Apply
false
0
false
akka.http.scaladsl.server.directives.RouteDirectives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ClientError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ClientError, String](akka.http.scaladsl.model.StatusCodes.BadRequest, msg))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ClientError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ClientError], marshalling.this.Marshaller.StringMarshaller)))

185
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1286
1286
40
com.usermanagement.crud.models.HandleRejection.$anonfun.<init>
Apply
false
0
false
new $anonfun()

186
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1431
1451
45
akka.http.scaladsl.model.StatusCodes.NotFound
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.NotFound

187
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1443
1443
45
akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromStatusCode
Select
false
0
false
marshalling.this.Marshaller.fromStatusCode

188
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1431
1451
45
akka.http.scaladsl.marshalling.ToResponseMarshallable.apply
ApplyToImplicitArgs
false
0
false
marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.StatusCodes.ClientError](akka.http.scaladsl.model.StatusCodes.NotFound)(marshalling.this.Marshaller.fromStatusCode)

189
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1422
1452
45
akka.http.scaladsl.server.directives.RouteDirectives.complete
Apply
false
0
false
akka.http.scaladsl.server.directives.RouteDirectives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.StatusCodes.ClientError](akka.http.scaladsl.model.StatusCodes.NotFound)(marshalling.this.Marshaller.fromStatusCode))

190
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1497
1521
48
akka.http.scaladsl.server.RejectionHandler.default
Select
false
0
false
akka.http.scaladsl.server.RejectionHandler.default

191
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1755
1801
52
java.lang.String.replaceAll
Apply
false
0
false
ent.data.utf8String.replaceAll("\"", "\\\"")

192
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
2139
2170
59
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

193
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
2190
2200
60
<nosymbol>
Literal
false
0
false
"{\"code\": "

194
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
2217
2229
60
<nosymbol>
Literal
false
0
false
", \"type\": \""

195
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
2244
2260
60
<nosymbol>
Literal
false
0
false
"\", \"message\": \""

196
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
2267
2272
60
<nosymbol>
Literal
false
0
false
"\"}"

197
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
2201
2216
60
akka.http.scaladsl.model.StatusCode.intValue
Apply
false
0
false
status.intValue()

198
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
2230
2243
60
akka.http.scaladsl.model.StatusCode.reason
Apply
false
0
false
status.reason()

199
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
2186
2272
60
scala.StringContext.s
Apply
false
0
false
scala.StringContext.apply("{\"code\": ", ", \"type\": \"", "\", \"message\": \"", "\"}").s(status.intValue(), status.reason(), message)

200
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
2113
2273
58
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, scala.StringContext.apply("{\"code\": ", ", \"type\": \"", "\", \"message\": \"", "\"}").s(status.intValue(), status.reason(), message))

201
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
2044
2285
56
akka.http.scaladsl.model.HttpResponse.withHeadersAndEntity
Apply
false
0
false
res.withHeadersAndEntity(headers, akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, scala.StringContext.apply("{\"code\": ", ", \"type\": \"", "\", \"message\": \"", "\"}").s(status.intValue(), status.reason(), message)))

202
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HandleRejection.scala
com.usermanagement.crud.models
HandleRejection
Object
com.usermanagement.crud.models.HandleRejection
newHandler
1113
2359
49
akka.http.scaladsl.server.RejectionHandler.mapRejectionResponse
Apply
false
0
false
akka.http.scaladsl.server.RejectionHandler.newBuilder().handle(({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[akka.http.scaladsl.server.Rejection,akka.http.scaladsl.server.RequestContext => scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]] with Serializable {
    def <init>(): <$anon: akka.http.scaladsl.server.Rejection => (akka.http.scaladsl.server.RequestContext => scala.concurrent.Future[akka.http.scaladsl.server.RouteResult])> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: akka.http.scaladsl.server.Rejection, B1 >: akka.http.scaladsl.server.RequestContext => scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]](x1: A1, default: A1 => B1): B1 = ((x1.asInstanceOf[akka.http.scaladsl.server.Rejection]: akka.http.scaladsl.server.Rejection): akka.http.scaladsl.server.Rejection @unchecked) match {
      case (parameterName: String)akka.http.scaladsl.server.MissingQueryParamRejection((msg @ _)) => akka.http.scaladsl.server.directives.RouteDirectives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ClientError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ClientError, String](akka.http.scaladsl.model.StatusCodes.BadRequest, msg))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ClientError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ClientError], marshalling.this.Marshaller.StringMarshaller)))
      case (defaultCase$ @ _) => default.apply(x1)
    };
    final def isDefinedAt(x1: akka.http.scaladsl.server.Rejection): Boolean = ((x1.asInstanceOf[akka.http.scaladsl.server.Rejection]: akka.http.scaladsl.server.Rejection): akka.http.scaladsl.server.Rejection @unchecked) match {
      case (parameterName: String)akka.http.scaladsl.server.MissingQueryParamRejection((msg @ _)) => true
      case (defaultCase$ @ _) => false
    }
  };
  new $anonfun()
}: PartialFunction[akka.http.scaladsl.server.Rejection,akka.http.scaladsl.server.RequestContext => scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]])).handle(({
  @SerialVersionUID(value = 0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[akka.http.scaladsl.server.Rejection,akka.http.scaladsl.server.RequestContext => scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]] with Serializable {
    def <init>(): <$anon: akka.http.scaladsl.server.Rejection => (akka.http.scaladsl.server.RequestContext => scala.concurrent.Future[akka.http.scaladsl.server.RouteResult])> = {
      $anonfun.super.<init>();
      ()
    };
    final override def applyOrElse[A1 <: akka.http.scaladsl.server.Rejection, B1 >: akka.http.scaladsl.server.RequestContext => scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]](x2: A1, default: A1 => B1): B1 = ((x2.asInstanceOf[akka.http.scaladsl.server.Rejection]: akka.http.scaladsl.server.Rejection): akka.http.scaladsl.server.Rejection @unchecked) match {
      case (message: String, cause: Option[Throwable])akka.http.scaladsl.server.ValidationRejection((msg @ _), _) => akka.http.scaladsl.server.directives.RouteDirectives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ClientError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ClientError, String](akka.http.scaladsl.model.StatusCodes.BadRequest, msg))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ClientError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ClientError], marshalling.this.Marshaller.StringMarshaller)))
      case (defaultCase$ @ _) => default.apply(x2)
    };
    final def isDefinedAt(x2: akka.http.scaladsl.server.Rejection): Boolean = ((x2.asInstanceOf[akka.http.scaladsl.server.Rejection]: akka.http.scaladsl.server.Rejection): akka.http.scaladsl.server.Rejection @unchecked) match {
      case (message: String, cause: Option[Throwable])akka.http.scaladsl.server.ValidationRejection((msg @ _), _) => true
      case (defaultCase$ @ _) => false
    }
  };
  new $anonfun()
}: PartialFunction[akka.http.scaladsl.server.Rejection,akka.http.scaladsl.server.RequestContext => scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]])).handleNotFound(akka.http.scaladsl.server.directives.RouteDirectives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.StatusCodes.ClientError](akka.http.scaladsl.model.StatusCodes.NotFound)(marshalling.this.Marshaller.fromStatusCode))).result().withFallback(akka.http.scaladsl.server.RejectionHandler.default).mapRejectionResponse(((x0$1: akka.http.scaladsl.model.HttpResponse) => x0$1 match {
  case (res @ akka.http.scaladsl.model.HttpResponse.unapply(<unapply-selector>) <unapply> ((status @ _), (headers @ _), (ent @ (_: akka.http.scaladsl.model.HttpEntity.Strict)), _)) => {
    val message: String = ent.data.utf8String.replaceAll("\"", "\\\"");
    res.withHeadersAndEntity(headers, akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, scala.StringContext.apply("{\"code\": ", ", \"type\": \"", "\", \"message\": \"", "\"}").s(status.intValue(), status.reason(), message)))
  }
  case (x @ _) => x
}))

203
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/Helper.scala
com.usermanagement.crud.models
Helper
Trait
com.usermanagement.crud.models.Helper
<none>
905
916
23
net.liftweb.json.NoTypeHints
Select
false
0
false
net.liftweb.json.NoTypeHints

204
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/Helper.scala
com.usermanagement.crud.models
Helper
Trait
com.usermanagement.crud.models.Helper
<none>
883
917
23
net.liftweb.json.Serialization.formats
Apply
false
0
false
net.liftweb.json.Serialization.formats(net.liftweb.json.NoTypeHints)

205
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/Helper.scala
com.usermanagement.crud.models
Helper
Trait
com.usermanagement.crud.models.Helper
write
1070
1070
27
com.usermanagement.crud.models.Helper.formats
Select
false
0
false
Helper.this.formats

206
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/Helper.scala
com.usermanagement.crud.models
Helper
Trait
com.usermanagement.crud.models.Helper
write
1051
1077
27
net.liftweb.json.Serialization.write
ApplyToImplicitArgs
false
0
false
net.liftweb.json.Serialization.write[T](value)(Helper.this.formats)

207
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HttpUtility.scala
com.usermanagement.crud.models
HttpUtility
Trait
com.usermanagement.crud.models.HttpUtility
<none>
1060
1088
25
com.usermanagement.crud.models.HandleRejection.newHandler
Apply
false
0
false
HandleRejection.newHandler()

208
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HttpUtility.scala
com.usermanagement.crud.models
HttpUtility
Trait
com.usermanagement.crud.models.HttpUtility
logDuration
1156
1182
28
java.lang.System.currentTimeMillis
Apply
false
0
false
java.lang.System.currentTimeMillis()

209
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HttpUtility.scala
com.usermanagement.crud.models
HttpUtility
Trait
com.usermanagement.crud.models.HttpUtility
logDuration
1301
1342
32
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addByNameNullaryApply(HttpUtility.this.handleRejections(HttpUtility.this.rejectionHandler)).apply(inner)

210
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HttpUtility.scala
com.usermanagement.crud.models
HttpUtility
Trait
com.usermanagement.crud.models.HttpUtility
logDuration
1347
1581
38
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addByNameNullaryApply(HttpUtility.this.mapResponse(((resp: akka.http.scaladsl.model.HttpResponse) => {
  val d: Long = java.lang.System.currentTimeMillis().-(start);
  (if (HttpUtility.this.logger.underlying.isInfoEnabled())
    HttpUtility.this.logger.underlying.info("[{}] {} {} took: {}ms", resp.status.intValue().asInstanceOf[AnyRef], ctx.request.method.name(), ctx.request.uri, d.asInstanceOf[AnyRef])
  else
    (): Unit);
  resp
}))).apply(innerRejectionsHandled).apply(ctx)

211
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HttpUtility.scala
com.usermanagement.crud.models
HttpUtility
Trait
com.usermanagement.crud.models.HttpUtility
handleResponseWithEntity
1691
1722
42
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

212
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HttpUtility.scala
com.usermanagement.crud.models
HttpUtility
Trait
com.usermanagement.crud.models.HttpUtility
handleResponseWithEntity
1680
1733
42
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, response)

213
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HttpUtility.scala
com.usermanagement.crud.models
HttpUtility
Trait
com.usermanagement.crud.models.HttpUtility
handleResponseWithEntity
1658
1658
42
akka.http.scaladsl.model.HttpResponse.apply$default$1
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$1

214
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HttpUtility.scala
com.usermanagement.crud.models
HttpUtility
Trait
com.usermanagement.crud.models.HttpUtility
handleResponseWithEntity
1658
1658
42
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

215
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HttpUtility.scala
com.usermanagement.crud.models
HttpUtility
Trait
com.usermanagement.crud.models.HttpUtility
handleResponseWithEntity
1658
1658
42
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

216
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/HttpUtility.scala
com.usermanagement.crud.models
HttpUtility
Trait
com.usermanagement.crud.models.HttpUtility
handleResponseWithEntity
1658
1734
42
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$2, x$3, x$1, x$4)

217
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/ResponseFormat.scala
com.usermanagement.crud.models
ResponseFormat
Trait
com.usermanagement.crud.models.ResponseFormat
<none>
1096
1114
33
<nosymbol>
Literal
false
0
false
"http://localhost"

218
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/ResponseFormat.scala
com.usermanagement.crud.models
ResponseFormat
Trait
com.usermanagement.crud.models.ResponseFormat
generateCommonResponseForCaseClass
1497
1556
41
com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass.apply
Apply
false
0
false
com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass.apply(resource, status, error, data)

219
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/ResponseFormat.scala
com.usermanagement.crud.models
ResponseFormat
Trait
com.usermanagement.crud.models.ResponseFormat
sendFormattedError
1787
1787
48
com.usermanagement.crud.models.ResponsesConfiguration.Error.apply$default$3
Select
false
0
false
com.usermanagement.crud.models.ResponsesConfiguration.Error.apply$default$3

220
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/ResponseFormat.scala
com.usermanagement.crud.models
ResponseFormat
Trait
com.usermanagement.crud.models.ResponseFormat
sendFormattedError
1787
1817
48
com.usermanagement.crud.models.ResponsesConfiguration.Error.apply
Apply
false
0
false
com.usermanagement.crud.models.ResponsesConfiguration.Error.apply(errorCode, errorMessage, com.usermanagement.crud.models.ResponsesConfiguration.Error.apply$default$3)

221
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/ResponseFormat.scala
com.usermanagement.crud.models
ResponseFormat
Trait
com.usermanagement.crud.models.ResponseFormat
sendFormattedError
1782
1818
48
scala.collection.immutable.List.apply
Apply
false
0
false
scala.collection.immutable.List.apply[com.usermanagement.crud.models.ResponsesConfiguration.Error](com.usermanagement.crud.models.ResponsesConfiguration.Error.apply(errorCode, errorMessage, com.usermanagement.crud.models.ResponsesConfiguration.Error.apply$default$3))

222
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/ResponseFormat.scala
com.usermanagement.crud.models
ResponseFormat
Trait
com.usermanagement.crud.models.ResponseFormat
sendFormattedError
1854
1859
49
<nosymbol>
Literal
false
0
false
false

223
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/ResponseFormat.scala
com.usermanagement.crud.models
ResponseFormat
Trait
com.usermanagement.crud.models.ResponseFormat
sendFormattedError
1861
1872
49
scala.Some.apply
Apply
false
0
false
scala.Some.apply[List[com.usermanagement.crud.models.ResponsesConfiguration.Error]](error)

224
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/ResponseFormat.scala
com.usermanagement.crud.models
ResponseFormat
Trait
com.usermanagement.crud.models.ResponseFormat
sendFormattedError
1823
1894
49
com.usermanagement.crud.models.ResponseFormat.generateCommonResponseForError
Apply
false
0
false
ResponseFormat.this.generateCommonResponseForError(false, scala.Some.apply[List[com.usermanagement.crud.models.ResponsesConfiguration.Error]](error), resource)

225
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/ResponseFormat.scala
com.usermanagement.crud.models
ResponseFormat
Trait
com.usermanagement.crud.models.ResponseFormat
generateCommonResponseForError
2364
2368
60
scala.None
Select
false
0
false
scala.None

226
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/ResponseFormat.scala
com.usermanagement.crud.models
ResponseFormat
Trait
com.usermanagement.crud.models.ResponseFormat
generateCommonResponseForError
2354
2369
60
com.usermanagement.crud.models.ResponsesConfiguration.EmptyData.apply
Apply
false
0
false
com.usermanagement.crud.models.ResponsesConfiguration.EmptyData.apply(scala.None)

227
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/ResponseFormat.scala
com.usermanagement.crud.models
ResponseFormat
Trait
com.usermanagement.crud.models.ResponseFormat
generateCommonResponseForError
2349
2370
60
scala.Some.apply
Apply
false
0
false
scala.Some.apply[com.usermanagement.crud.models.ResponsesConfiguration.EmptyData](com.usermanagement.crud.models.ResponsesConfiguration.EmptyData.apply(scala.None))

228
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/models/ResponseFormat.scala
com.usermanagement.crud.models
ResponseFormat
Trait
com.usermanagement.crud.models.ResponseFormat
generateCommonResponseForError
2188
2371
57
com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError.apply
Apply
false
0
false
com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError.apply(resource, status, error, scala.Some.apply[com.usermanagement.crud.models.ResponsesConfiguration.EmptyData](com.usermanagement.crud.models.ResponsesConfiguration.EmptyData.apply(scala.None)))

229
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1610
1616
48
akka.http.scaladsl.server.ImplicitPathMatcherConstruction._segmentStringToPathMatcher
ApplyImplicitView
false
0
false
UserRestService.this._segmentStringToPathMatcher("user")

230
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1599
1617
48
akka.http.scaladsl.server.directives.PathDirectives.pathPrefix
Apply
false
0
false
UserRestService.this.pathPrefix[Unit](UserRestService.this._segmentStringToPathMatcher("user"))

231
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1626
1629
49
akka.http.scaladsl.server.directives.MethodDirectives.get
Select
false
0
false
UserRestService.this.get

232
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1645
1660
50
akka.http.scaladsl.server.ImplicitPathMatcherConstruction._segmentStringToPathMatcher
ApplyImplicitView
false
0
false
UserRestService.this._segmentStringToPathMatcher("get-all-users")

233
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1640
1661
50
akka.http.scaladsl.server.directives.PathDirectives.path
Apply
false
0
false
UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("get-all-users"))

234
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1699
1720
52
com.usermanagement.crud.servicehandler.UserRestServiceHandler.getUserDetails
Apply
false
0
false
UserRestService.this.getUserDetails(actor)

235
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1752
1752
53
akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromResponse
Select
false
0
false
marshalling.this.Marshaller.fromResponse

236
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1752
1752
53
akka.http.scaladsl.marshalling.GenericMarshallers.futureMarshaller
ApplyToImplicitArgs
false
0
false
marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse)

237
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1752
1758
53
akka.http.scaladsl.marshalling.ToResponseMarshallable.apply
ApplyToImplicitArgs
false
0
false
marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))

238
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1743
1759
53
akka.http.scaladsl.server.directives.RouteDirectives.complete
Apply
false
0
false
UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse)))

239
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1731
1760
53
com.usermanagement.crud.models.HttpUtility.logDuration
Apply
false
0
false
UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))

240
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1640
1770
50
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addByNameNullaryApply(UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("get-all-users"))).apply({
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.getUserDetails(actor);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
})

241
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1626
1772
49
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addByNameNullaryApply(UserRestService.this.get).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("get-all-users"))).apply({
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.getUserDetails(actor);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
}))

242
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1780
1786
55
akka.http.scaladsl.server.directives.MethodDirectives.delete
Select
false
0
false
UserRestService.this.delete

243
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1796
1813
55
akka.http.scaladsl.server.ImplicitPathMatcherConstruction._segmentStringToPathMatcher
ApplyImplicitView
false
0
false
UserRestService.this._segmentStringToPathMatcher("delete-customer")

244
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1791
1814
55
akka.http.scaladsl.server.directives.PathDirectives.path
Apply
false
0
false
UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("delete-customer"))

245
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1840
1847
56
scala.Symbol.apply
Apply
false
0
false
scala.Symbol.apply("userId")

246
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1840
1849
56
akka.http.scaladsl.common.NameReceptacle.?
Select
false
0
false
UserRestService.this._symbol2NR(scala.Symbol.apply("userId")).?

247
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1848
1848
56
akka.http.scaladsl.unmarshalling.Unmarshaller.identityUnmarshaller
TypeApply
false
0
false
unmarshalling.this.Unmarshaller.identityUnmarshaller[String]

248
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1848
1848
56
akka.http.scaladsl.unmarshalling.LowerPriorityGenericUnmarshallers.sourceOptionUnmarshaller
ApplyToImplicitArgs
false
0
false
unmarshalling.this.Unmarshaller.sourceOptionUnmarshaller[String, String](unmarshalling.this.Unmarshaller.identityUnmarshaller[String])

249
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1848
1848
56
akka.http.scaladsl.server.directives.ParameterDirectives.ParamDef.forNOR
ApplyToImplicitArgs
false
0
false
ParameterDirectives.this.ParamDef.forNOR[String](unmarshalling.this.Unmarshaller.sourceOptionUnmarshaller[String, String](unmarshalling.this.Unmarshaller.identityUnmarshaller[String]))

250
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1840
1849
56
akka.http.scaladsl.server.directives.ParameterDirectives.ParamMagnet.apply
ApplyToImplicitArgs
false
0
false
ParameterDirectives.this.ParamMagnet.apply[akka.http.scaladsl.common.NameOptionReceptacle[String]](UserRestService.this._symbol2NR(scala.Symbol.apply("userId")).?)(ParameterDirectives.this.ParamDef.forNOR[String](unmarshalling.this.Unmarshaller.sourceOptionUnmarshaller[String, String](unmarshalling.this.Unmarshaller.identityUnmarshaller[String])))

251
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1829
1850
56
akka.http.scaladsl.server.directives.ParameterDirectives.parameters
Apply
false
0
false
UserRestService.this.parameters(ParameterDirectives.this.ParamMagnet.apply[akka.http.scaladsl.common.NameOptionReceptacle[String]](UserRestService.this._symbol2NR(scala.Symbol.apply("userId")).?)(ParameterDirectives.this.ParamDef.forNOR[String](unmarshalling.this.Unmarshaller.sourceOptionUnmarshaller[String, String](unmarshalling.this.Unmarshaller.identityUnmarshaller[String]))))

252
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1839
1839
56
akka.http.scaladsl.server.util.ApplyConverterInstances.hac1
TypeApply
false
0
false
util.this.ApplyConverter.hac1[Option[String]]

253
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1924
1949
58
com.usermanagement.crud.servicehandler.UserRestServiceHandler.deleteUser
Apply
false
0
false
UserRestService.this.deleteUser(actor, userId)

254
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1985
1985
59
akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromResponse
Select
false
0
false
marshalling.this.Marshaller.fromResponse

255
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1985
1985
59
akka.http.scaladsl.marshalling.GenericMarshallers.futureMarshaller
ApplyToImplicitArgs
false
0
false
marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse)

256
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1985
1991
59
akka.http.scaladsl.marshalling.ToResponseMarshallable.apply
ApplyToImplicitArgs
false
0
false
marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))

257
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1976
1992
59
akka.http.scaladsl.server.directives.RouteDirectives.complete
Apply
false
0
false
UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse)))

258
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1964
1993
59
com.usermanagement.crud.models.HttpUtility.logDuration
Apply
false
0
false
UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))

259
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1829
2007
56
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addDirectiveApply[(Option[String],)](UserRestService.this.parameters(ParameterDirectives.this.ParamMagnet.apply[akka.http.scaladsl.common.NameOptionReceptacle[String]](UserRestService.this._symbol2NR(scala.Symbol.apply("userId")).?)(ParameterDirectives.this.ParamDef.forNOR[String](unmarshalling.this.Unmarshaller.sourceOptionUnmarshaller[String, String](unmarshalling.this.Unmarshaller.identityUnmarshaller[String])))))(util.this.ApplyConverter.hac1[Option[String]]).apply(((userId: Option[String]) => {
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.deleteUser(actor, userId);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
}))

260
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1791
2019
55
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addByNameNullaryApply(UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("delete-customer"))).apply(server.this.Directive.addDirectiveApply[(Option[String],)](UserRestService.this.parameters(ParameterDirectives.this.ParamMagnet.apply[akka.http.scaladsl.common.NameOptionReceptacle[String]](UserRestService.this._symbol2NR(scala.Symbol.apply("userId")).?)(ParameterDirectives.this.ParamDef.forNOR[String](unmarshalling.this.Unmarshaller.sourceOptionUnmarshaller[String, String](unmarshalling.this.Unmarshaller.identityUnmarshaller[String])))))(util.this.ApplyConverter.hac1[Option[String]]).apply(((userId: Option[String]) => {
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.deleteUser(actor, userId);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
})))

261
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1780
2027
55
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addByNameNullaryApply(UserRestService.this.delete).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("delete-customer"))).apply(server.this.Directive.addDirectiveApply[(Option[String],)](UserRestService.this.parameters(ParameterDirectives.this.ParamMagnet.apply[akka.http.scaladsl.common.NameOptionReceptacle[String]](UserRestService.this._symbol2NR(scala.Symbol.apply("userId")).?)(ParameterDirectives.this.ParamDef.forNOR[String](unmarshalling.this.Unmarshaller.sourceOptionUnmarshaller[String, String](unmarshalling.this.Unmarshaller.identityUnmarshaller[String])))))(util.this.ApplyConverter.hac1[Option[String]]).apply(((userId: Option[String]) => {
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.deleteUser(actor, userId);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
}))))

262
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1626
2027
54
akka.http.scaladsl.server.RouteConcatenation.RouteWithConcatenation.~
Apply
false
0
false
UserRestService.this._enhanceRouteWithConcatenation(server.this.Directive.addByNameNullaryApply(UserRestService.this.get).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("get-all-users"))).apply({
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.getUserDetails(actor);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
}))).~(server.this.Directive.addByNameNullaryApply(UserRestService.this.delete).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("delete-customer"))).apply(server.this.Directive.addDirectiveApply[(Option[String],)](UserRestService.this.parameters(ParameterDirectives.this.ParamMagnet.apply[akka.http.scaladsl.common.NameOptionReceptacle[String]](UserRestService.this._symbol2NR(scala.Symbol.apply("userId")).?)(ParameterDirectives.this.ParamDef.forNOR[String](unmarshalling.this.Unmarshaller.sourceOptionUnmarshaller[String, String](unmarshalling.this.Unmarshaller.identityUnmarshaller[String])))))(util.this.ApplyConverter.hac1[Option[String]]).apply(((userId: Option[String]) => {
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.deleteUser(actor, userId);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
})))))

263
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2049
2062
63
akka.http.scaladsl.server.ImplicitPathMatcherConstruction._segmentStringToPathMatcher
ApplyImplicitView
false
0
false
UserRestService.this._segmentStringToPathMatcher("insert-user")

264
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2038
2063
63
akka.http.scaladsl.server.directives.PathDirectives.pathPrefix
Apply
false
0
false
UserRestService.this.pathPrefix[Unit](UserRestService.this._segmentStringToPathMatcher("insert-user"))

265
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2076
2083
64
akka.http.scaladsl.server.directives.PathDirectives.pathEnd
Select
false
0
false
UserRestService.this.pathEnd

266
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2114
2114
65
io.circe.LowPriorityDecoders.importedDecoder
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]))

267
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2114
2114
65
de.heikoseeberger.akkahttpcirce.FailFastUnmarshaller.unmarshaller
ApplyToImplicitArgs
false
0
false
de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UserDetails](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]])))

268
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2114
2114
65
akka.http.scaladsl.unmarshalling.LowerPriorityGenericUnmarshallers.messageUnmarshallerFromEntityUnmarshaller
ApplyToImplicitArgs
false
0
false
unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UserDetails](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UserDetails](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]))))

269
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2112
2127
65
akka.http.scaladsl.server.directives.MarshallingDirectives.as
ApplyToImplicitArgs
false
0
false
UserRestService.this.as[com.usermanagement.crud.dao.UserDetails](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UserDetails](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UserDetails](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]])))))

270
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2105
2128
65
akka.http.scaladsl.server.directives.MarshallingDirectives.entity
Apply
false
0
false
UserRestService.this.entity[com.usermanagement.crud.dao.UserDetails](UserRestService.this.as[com.usermanagement.crud.dao.UserDetails](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UserDetails](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UserDetails](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]))))))

271
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2111
2111
65
akka.http.scaladsl.server.util.TupleOps.Join.join0P
TypeApply
false
0
false
TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UserDetails,)]

272
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2105
2128
65
akka.http.scaladsl.server.ConjunctionMagnet.fromDirective
ApplyToImplicitArgs
false
0
false
server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.entity[com.usermanagement.crud.dao.UserDetails](UserRestService.this.as[com.usermanagement.crud.dao.UserDetails](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UserDetails](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UserDetails](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UserDetails,)])

273
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2099
2128
65
akka.http.scaladsl.server.Directive.&
Apply
false
0
false
UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.entity[com.usermanagement.crud.dao.UserDetails](UserRestService.this.as[com.usermanagement.crud.dao.UserDetails](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UserDetails](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UserDetails](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UserDetails,)]))

274
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2103
2103
65
akka.http.scaladsl.server.util.ApplyConverterInstances.hac1
TypeApply
false
0
false
util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UserDetails]

275
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2251
2285
68
com.usermanagement.crud.servicehandler.UserRestServiceHandler.addUserDetails
Apply
false
0
false
UserRestService.this.addUserDetails(actor, userDetails)

276
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2321
2321
69
akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromResponse
Select
false
0
false
marshalling.this.Marshaller.fromResponse

277
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2321
2321
69
akka.http.scaladsl.marshalling.GenericMarshallers.futureMarshaller
ApplyToImplicitArgs
false
0
false
marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse)

278
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2321
2327
69
akka.http.scaladsl.marshalling.ToResponseMarshallable.apply
ApplyToImplicitArgs
false
0
false
marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))

279
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2312
2328
69
akka.http.scaladsl.server.directives.RouteDirectives.complete
Apply
false
0
false
UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse)))

280
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2300
2329
69
com.usermanagement.crud.models.HttpUtility.logDuration
Apply
false
0
false
UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))

281
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2098
2343
65
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addDirectiveApply[(com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.entity[com.usermanagement.crud.dao.UserDetails](UserRestService.this.as[com.usermanagement.crud.dao.UserDetails](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UserDetails](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UserDetails](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UserDetails,)])))(util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UserDetails]).apply(((userDetails: com.usermanagement.crud.dao.UserDetails) => {
  (if (UserRestService.this.logger.underlying.isInfoEnabled())
    UserRestService.this.logger.underlying.info("add user details ".+(userDetails))
  else
    (): Unit);
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.addUserDetails(actor, userDetails);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
}))

282
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2076
2355
64
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addByNameNullaryApply(UserRestService.this.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.entity[com.usermanagement.crud.dao.UserDetails](UserRestService.this.as[com.usermanagement.crud.dao.UserDetails](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UserDetails](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UserDetails](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UserDetails,)])))(util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UserDetails]).apply(((userDetails: com.usermanagement.crud.dao.UserDetails) => {
  (if (UserRestService.this.logger.underlying.isInfoEnabled())
    UserRestService.this.logger.underlying.info("add user details ".+(userDetails))
  else
    (): Unit);
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.addUserDetails(actor, userDetails);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
})))

283
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2038
2365
63
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addByNameNullaryApply(UserRestService.this.pathPrefix[Unit](UserRestService.this._segmentStringToPathMatcher("insert-user"))).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.entity[com.usermanagement.crud.dao.UserDetails](UserRestService.this.as[com.usermanagement.crud.dao.UserDetails](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UserDetails](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UserDetails](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UserDetails,)])))(util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UserDetails]).apply(((userDetails: com.usermanagement.crud.dao.UserDetails) => {
  (if (UserRestService.this.logger.underlying.isInfoEnabled())
    UserRestService.this.logger.underlying.info("add user details ".+(userDetails))
  else
    (): Unit);
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.addUserDetails(actor, userDetails);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
}))))

284
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1626
2365
62
akka.http.scaladsl.server.RouteConcatenation.RouteWithConcatenation.~
Apply
false
0
false
UserRestService.this._enhanceRouteWithConcatenation(UserRestService.this._enhanceRouteWithConcatenation(server.this.Directive.addByNameNullaryApply(UserRestService.this.get).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("get-all-users"))).apply({
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.getUserDetails(actor);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
}))).~(server.this.Directive.addByNameNullaryApply(UserRestService.this.delete).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("delete-customer"))).apply(server.this.Directive.addDirectiveApply[(Option[String],)](UserRestService.this.parameters(ParameterDirectives.this.ParamMagnet.apply[akka.http.scaladsl.common.NameOptionReceptacle[String]](UserRestService.this._symbol2NR(scala.Symbol.apply("userId")).?)(ParameterDirectives.this.ParamDef.forNOR[String](unmarshalling.this.Unmarshaller.sourceOptionUnmarshaller[String, String](unmarshalling.this.Unmarshaller.identityUnmarshaller[String])))))(util.this.ApplyConverter.hac1[Option[String]]).apply(((userId: Option[String]) => {
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.deleteUser(actor, userId);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
})))))).~(server.this.Directive.addByNameNullaryApply(UserRestService.this.pathPrefix[Unit](UserRestService.this._segmentStringToPathMatcher("insert-user"))).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.entity[com.usermanagement.crud.dao.UserDetails](UserRestService.this.as[com.usermanagement.crud.dao.UserDetails](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UserDetails](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UserDetails](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UserDetails,)])))(util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UserDetails]).apply(((userDetails: com.usermanagement.crud.dao.UserDetails) => {
  (if (UserRestService.this.logger.underlying.isInfoEnabled())
    UserRestService.this.logger.underlying.info("add user details ".+(userDetails))
  else
    (): Unit);
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.addUserDetails(actor, userDetails);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
})))))

285
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2387
2410
73
akka.http.scaladsl.server.ImplicitPathMatcherConstruction._segmentStringToPathMatcher
ApplyImplicitView
false
0
false
UserRestService.this._segmentStringToPathMatcher("update-admin-username")

286
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2376
2411
73
akka.http.scaladsl.server.directives.PathDirectives.pathPrefix
Apply
false
0
false
UserRestService.this.pathPrefix[Unit](UserRestService.this._segmentStringToPathMatcher("update-admin-username"))

287
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2424
2431
74
akka.http.scaladsl.server.directives.PathDirectives.pathEnd
Select
false
0
false
UserRestService.this.pathEnd

288
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2462
2462
75
io.circe.LowPriorityDecoders.importedDecoder
ApplyToImplicitArgs
false
0
false
circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]({
  val inst$macro$242: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = {
    final class anon$importedDecoder$macro$241 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$241 = {
        anon$importedDecoder$macro$241.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$240: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$233: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UpdateAdminUsername, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UpdateAdminUsername, (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,(Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$239 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): anon$macro$239 = {
      anon$macro$239.super.<init>();
      ()
    };
    type Repr = Option[String] :: Option[String] :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UpdateAdminUsername): anon$macro$239.this.Repr = p match {
  case (userId: Option[String], username: Option[String])com.usermanagement.crud.dao.UpdateAdminUsername((pat$macro$237 @ _), (pat$macro$238 @ _)) => shapeless.::.apply[Option[String], Option[String] :: shapeless.HNil.type](pat$macro$237, shapeless.::.apply[Option[String], shapeless.HNil.type](pat$macro$238, shapeless.HNil))
}.asInstanceOf[anon$macro$239.this.Repr];
    def from(p: anon$macro$239.this.Repr): com.usermanagement.crud.dao.UpdateAdminUsername = p match {
      case (head: Option[String], tail: Option[String] :: shapeless.HNil)Option[String] :: Option[String] :: shapeless.HNil((pat$macro$237 @ _), (head: Option[String], tail: shapeless.HNil)Option[String] :: shapeless.HNil((pat$macro$238 @ _), shapeless.HNil)) => dao.this.UpdateAdminUsername.apply(pat$macro$237, pat$macro$238)
    }
  };
  (new anon$macro$239(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,Option[String] :: Option[String] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), Option[String], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]](anon$importedDecoder$macro$241.this.inst$macro$240)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]
    };
    new anon$importedDecoder$macro$241().inst$macro$233
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]](inst$macro$242)
}): io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]))

289
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2462
2462
75
de.heikoseeberger.akkahttpcirce.FailFastUnmarshaller.unmarshaller
ApplyToImplicitArgs
false
0
false
de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]({
  val inst$macro$242: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = {
    final class anon$importedDecoder$macro$241 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$241 = {
        anon$importedDecoder$macro$241.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$240: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$233: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UpdateAdminUsername, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UpdateAdminUsername, (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,(Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$239 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): anon$macro$239 = {
      anon$macro$239.super.<init>();
      ()
    };
    type Repr = Option[String] :: Option[String] :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UpdateAdminUsername): anon$macro$239.this.Repr = p match {
  case (userId: Option[String], username: Option[String])com.usermanagement.crud.dao.UpdateAdminUsername((pat$macro$237 @ _), (pat$macro$238 @ _)) => shapeless.::.apply[Option[String], Option[String] :: shapeless.HNil.type](pat$macro$237, shapeless.::.apply[Option[String], shapeless.HNil.type](pat$macro$238, shapeless.HNil))
}.asInstanceOf[anon$macro$239.this.Repr];
    def from(p: anon$macro$239.this.Repr): com.usermanagement.crud.dao.UpdateAdminUsername = p match {
      case (head: Option[String], tail: Option[String] :: shapeless.HNil)Option[String] :: Option[String] :: shapeless.HNil((pat$macro$237 @ _), (head: Option[String], tail: shapeless.HNil)Option[String] :: shapeless.HNil((pat$macro$238 @ _), shapeless.HNil)) => dao.this.UpdateAdminUsername.apply(pat$macro$237, pat$macro$238)
    }
  };
  (new anon$macro$239(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,Option[String] :: Option[String] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), Option[String], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]](anon$importedDecoder$macro$241.this.inst$macro$240)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]
    };
    new anon$importedDecoder$macro$241().inst$macro$233
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]](inst$macro$242)
}): io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]])))

290
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2462
2462
75
akka.http.scaladsl.unmarshalling.LowerPriorityGenericUnmarshallers.messageUnmarshallerFromEntityUnmarshaller
ApplyToImplicitArgs
false
0
false
unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]({
  val inst$macro$242: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = {
    final class anon$importedDecoder$macro$241 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$241 = {
        anon$importedDecoder$macro$241.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$240: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$233: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UpdateAdminUsername, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UpdateAdminUsername, (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,(Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$239 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): anon$macro$239 = {
      anon$macro$239.super.<init>();
      ()
    };
    type Repr = Option[String] :: Option[String] :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UpdateAdminUsername): anon$macro$239.this.Repr = p match {
  case (userId: Option[String], username: Option[String])com.usermanagement.crud.dao.UpdateAdminUsername((pat$macro$237 @ _), (pat$macro$238 @ _)) => shapeless.::.apply[Option[String], Option[String] :: shapeless.HNil.type](pat$macro$237, shapeless.::.apply[Option[String], shapeless.HNil.type](pat$macro$238, shapeless.HNil))
}.asInstanceOf[anon$macro$239.this.Repr];
    def from(p: anon$macro$239.this.Repr): com.usermanagement.crud.dao.UpdateAdminUsername = p match {
      case (head: Option[String], tail: Option[String] :: shapeless.HNil)Option[String] :: Option[String] :: shapeless.HNil((pat$macro$237 @ _), (head: Option[String], tail: shapeless.HNil)Option[String] :: shapeless.HNil((pat$macro$238 @ _), shapeless.HNil)) => dao.this.UpdateAdminUsername.apply(pat$macro$237, pat$macro$238)
    }
  };
  (new anon$macro$239(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,Option[String] :: Option[String] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), Option[String], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]](anon$importedDecoder$macro$241.this.inst$macro$240)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]
    };
    new anon$importedDecoder$macro$241().inst$macro$233
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]](inst$macro$242)
}): io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]))))

291
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2460
2483
75
akka.http.scaladsl.server.directives.MarshallingDirectives.as
ApplyToImplicitArgs
false
0
false
UserRestService.this.as[com.usermanagement.crud.dao.UpdateAdminUsername](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]({
  val inst$macro$242: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = {
    final class anon$importedDecoder$macro$241 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$241 = {
        anon$importedDecoder$macro$241.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$240: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$233: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UpdateAdminUsername, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UpdateAdminUsername, (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,(Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$239 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): anon$macro$239 = {
      anon$macro$239.super.<init>();
      ()
    };
    type Repr = Option[String] :: Option[String] :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UpdateAdminUsername): anon$macro$239.this.Repr = p match {
  case (userId: Option[String], username: Option[String])com.usermanagement.crud.dao.UpdateAdminUsername((pat$macro$237 @ _), (pat$macro$238 @ _)) => shapeless.::.apply[Option[String], Option[String] :: shapeless.HNil.type](pat$macro$237, shapeless.::.apply[Option[String], shapeless.HNil.type](pat$macro$238, shapeless.HNil))
}.asInstanceOf[anon$macro$239.this.Repr];
    def from(p: anon$macro$239.this.Repr): com.usermanagement.crud.dao.UpdateAdminUsername = p match {
      case (head: Option[String], tail: Option[String] :: shapeless.HNil)Option[String] :: Option[String] :: shapeless.HNil((pat$macro$237 @ _), (head: Option[String], tail: shapeless.HNil)Option[String] :: shapeless.HNil((pat$macro$238 @ _), shapeless.HNil)) => dao.this.UpdateAdminUsername.apply(pat$macro$237, pat$macro$238)
    }
  };
  (new anon$macro$239(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,Option[String] :: Option[String] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), Option[String], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]](anon$importedDecoder$macro$241.this.inst$macro$240)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]
    };
    new anon$importedDecoder$macro$241().inst$macro$233
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]](inst$macro$242)
}): io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]])))))

292
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2453
2484
75
akka.http.scaladsl.server.directives.MarshallingDirectives.entity
Apply
false
0
false
UserRestService.this.entity[com.usermanagement.crud.dao.UpdateAdminUsername](UserRestService.this.as[com.usermanagement.crud.dao.UpdateAdminUsername](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]({
  val inst$macro$242: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = {
    final class anon$importedDecoder$macro$241 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$241 = {
        anon$importedDecoder$macro$241.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$240: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$233: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UpdateAdminUsername, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UpdateAdminUsername, (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,(Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$239 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): anon$macro$239 = {
      anon$macro$239.super.<init>();
      ()
    };
    type Repr = Option[String] :: Option[String] :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UpdateAdminUsername): anon$macro$239.this.Repr = p match {
  case (userId: Option[String], username: Option[String])com.usermanagement.crud.dao.UpdateAdminUsername((pat$macro$237 @ _), (pat$macro$238 @ _)) => shapeless.::.apply[Option[String], Option[String] :: shapeless.HNil.type](pat$macro$237, shapeless.::.apply[Option[String], shapeless.HNil.type](pat$macro$238, shapeless.HNil))
}.asInstanceOf[anon$macro$239.this.Repr];
    def from(p: anon$macro$239.this.Repr): com.usermanagement.crud.dao.UpdateAdminUsername = p match {
      case (head: Option[String], tail: Option[String] :: shapeless.HNil)Option[String] :: Option[String] :: shapeless.HNil((pat$macro$237 @ _), (head: Option[String], tail: shapeless.HNil)Option[String] :: shapeless.HNil((pat$macro$238 @ _), shapeless.HNil)) => dao.this.UpdateAdminUsername.apply(pat$macro$237, pat$macro$238)
    }
  };
  (new anon$macro$239(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,Option[String] :: Option[String] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), Option[String], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]](anon$importedDecoder$macro$241.this.inst$macro$240)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]
    };
    new anon$importedDecoder$macro$241().inst$macro$233
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]](inst$macro$242)
}): io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]))))))

293
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2459
2459
75
akka.http.scaladsl.server.util.TupleOps.Join.join0P
TypeApply
false
0
false
TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UpdateAdminUsername,)]

294
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2453
2484
75
akka.http.scaladsl.server.ConjunctionMagnet.fromDirective
ApplyToImplicitArgs
false
0
false
server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UpdateAdminUsername,)](UserRestService.this.entity[com.usermanagement.crud.dao.UpdateAdminUsername](UserRestService.this.as[com.usermanagement.crud.dao.UpdateAdminUsername](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]({
  val inst$macro$242: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = {
    final class anon$importedDecoder$macro$241 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$241 = {
        anon$importedDecoder$macro$241.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$240: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$233: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UpdateAdminUsername, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UpdateAdminUsername, (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,(Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$239 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): anon$macro$239 = {
      anon$macro$239.super.<init>();
      ()
    };
    type Repr = Option[String] :: Option[String] :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UpdateAdminUsername): anon$macro$239.this.Repr = p match {
  case (userId: Option[String], username: Option[String])com.usermanagement.crud.dao.UpdateAdminUsername((pat$macro$237 @ _), (pat$macro$238 @ _)) => shapeless.::.apply[Option[String], Option[String] :: shapeless.HNil.type](pat$macro$237, shapeless.::.apply[Option[String], shapeless.HNil.type](pat$macro$238, shapeless.HNil))
}.asInstanceOf[anon$macro$239.this.Repr];
    def from(p: anon$macro$239.this.Repr): com.usermanagement.crud.dao.UpdateAdminUsername = p match {
      case (head: Option[String], tail: Option[String] :: shapeless.HNil)Option[String] :: Option[String] :: shapeless.HNil((pat$macro$237 @ _), (head: Option[String], tail: shapeless.HNil)Option[String] :: shapeless.HNil((pat$macro$238 @ _), shapeless.HNil)) => dao.this.UpdateAdminUsername.apply(pat$macro$237, pat$macro$238)
    }
  };
  (new anon$macro$239(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,Option[String] :: Option[String] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), Option[String], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]](anon$importedDecoder$macro$241.this.inst$macro$240)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]
    };
    new anon$importedDecoder$macro$241().inst$macro$233
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]](inst$macro$242)
}): io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UpdateAdminUsername,)])

295
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2447
2484
75
akka.http.scaladsl.server.Directive.&
Apply
false
0
false
UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UpdateAdminUsername,)](UserRestService.this.entity[com.usermanagement.crud.dao.UpdateAdminUsername](UserRestService.this.as[com.usermanagement.crud.dao.UpdateAdminUsername](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]({
  val inst$macro$242: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = {
    final class anon$importedDecoder$macro$241 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$241 = {
        anon$importedDecoder$macro$241.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$240: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$233: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UpdateAdminUsername, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UpdateAdminUsername, (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,(Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$239 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): anon$macro$239 = {
      anon$macro$239.super.<init>();
      ()
    };
    type Repr = Option[String] :: Option[String] :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UpdateAdminUsername): anon$macro$239.this.Repr = p match {
  case (userId: Option[String], username: Option[String])com.usermanagement.crud.dao.UpdateAdminUsername((pat$macro$237 @ _), (pat$macro$238 @ _)) => shapeless.::.apply[Option[String], Option[String] :: shapeless.HNil.type](pat$macro$237, shapeless.::.apply[Option[String], shapeless.HNil.type](pat$macro$238, shapeless.HNil))
}.asInstanceOf[anon$macro$239.this.Repr];
    def from(p: anon$macro$239.this.Repr): com.usermanagement.crud.dao.UpdateAdminUsername = p match {
      case (head: Option[String], tail: Option[String] :: shapeless.HNil)Option[String] :: Option[String] :: shapeless.HNil((pat$macro$237 @ _), (head: Option[String], tail: shapeless.HNil)Option[String] :: shapeless.HNil((pat$macro$238 @ _), shapeless.HNil)) => dao.this.UpdateAdminUsername.apply(pat$macro$237, pat$macro$238)
    }
  };
  (new anon$macro$239(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,Option[String] :: Option[String] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), Option[String], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]](anon$importedDecoder$macro$241.this.inst$macro$240)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]
    };
    new anon$importedDecoder$macro$241().inst$macro$233
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]](inst$macro$242)
}): io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UpdateAdminUsername,)]))

296
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2451
2451
75
akka.http.scaladsl.server.util.ApplyConverterInstances.hac1
TypeApply
false
0
false
util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UpdateAdminUsername]

297
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2614
2654
78
com.usermanagement.crud.servicehandler.UserRestServiceHandler.updateAdminUsername
Apply
false
0
false
UserRestService.this.updateAdminUsername(actor, adminDetails)

298
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2690
2690
79
akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromResponse
Select
false
0
false
marshalling.this.Marshaller.fromResponse

299
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2690
2690
79
akka.http.scaladsl.marshalling.GenericMarshallers.futureMarshaller
ApplyToImplicitArgs
false
0
false
marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse)

300
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2690
2696
79
akka.http.scaladsl.marshalling.ToResponseMarshallable.apply
ApplyToImplicitArgs
false
0
false
marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))

301
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2681
2697
79
akka.http.scaladsl.server.directives.RouteDirectives.complete
Apply
false
0
false
UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse)))

302
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2669
2698
79
com.usermanagement.crud.models.HttpUtility.logDuration
Apply
false
0
false
UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))

303
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2446
2712
75
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addDirectiveApply[(com.usermanagement.crud.dao.UpdateAdminUsername,)](UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UpdateAdminUsername,)](UserRestService.this.entity[com.usermanagement.crud.dao.UpdateAdminUsername](UserRestService.this.as[com.usermanagement.crud.dao.UpdateAdminUsername](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]({
  val inst$macro$242: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = {
    final class anon$importedDecoder$macro$241 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$241 = {
        anon$importedDecoder$macro$241.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$240: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$233: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UpdateAdminUsername, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UpdateAdminUsername, (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,(Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$239 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): anon$macro$239 = {
      anon$macro$239.super.<init>();
      ()
    };
    type Repr = Option[String] :: Option[String] :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UpdateAdminUsername): anon$macro$239.this.Repr = p match {
  case (userId: Option[String], username: Option[String])com.usermanagement.crud.dao.UpdateAdminUsername((pat$macro$237 @ _), (pat$macro$238 @ _)) => shapeless.::.apply[Option[String], Option[String] :: shapeless.HNil.type](pat$macro$237, shapeless.::.apply[Option[String], shapeless.HNil.type](pat$macro$238, shapeless.HNil))
}.asInstanceOf[anon$macro$239.this.Repr];
    def from(p: anon$macro$239.this.Repr): com.usermanagement.crud.dao.UpdateAdminUsername = p match {
      case (head: Option[String], tail: Option[String] :: shapeless.HNil)Option[String] :: Option[String] :: shapeless.HNil((pat$macro$237 @ _), (head: Option[String], tail: shapeless.HNil)Option[String] :: shapeless.HNil((pat$macro$238 @ _), shapeless.HNil)) => dao.this.UpdateAdminUsername.apply(pat$macro$237, pat$macro$238)
    }
  };
  (new anon$macro$239(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,Option[String] :: Option[String] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), Option[String], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]](anon$importedDecoder$macro$241.this.inst$macro$240)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]
    };
    new anon$importedDecoder$macro$241().inst$macro$233
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]](inst$macro$242)
}): io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UpdateAdminUsername,)])))(util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UpdateAdminUsername]).apply(((adminDetails: com.usermanagement.crud.dao.UpdateAdminUsername) => {
  (if (UserRestService.this.logger.underlying.isInfoEnabled())
    UserRestService.this.logger.underlying.info("update admin username ".+(adminDetails))
  else
    (): Unit);
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.updateAdminUsername(actor, adminDetails);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
}))

304
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2424
2724
74
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addByNameNullaryApply(UserRestService.this.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.usermanagement.crud.dao.UpdateAdminUsername,)](UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UpdateAdminUsername,)](UserRestService.this.entity[com.usermanagement.crud.dao.UpdateAdminUsername](UserRestService.this.as[com.usermanagement.crud.dao.UpdateAdminUsername](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]({
  val inst$macro$242: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = {
    final class anon$importedDecoder$macro$241 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$241 = {
        anon$importedDecoder$macro$241.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$240: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$233: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UpdateAdminUsername, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UpdateAdminUsername, (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,(Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$239 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): anon$macro$239 = {
      anon$macro$239.super.<init>();
      ()
    };
    type Repr = Option[String] :: Option[String] :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UpdateAdminUsername): anon$macro$239.this.Repr = p match {
  case (userId: Option[String], username: Option[String])com.usermanagement.crud.dao.UpdateAdminUsername((pat$macro$237 @ _), (pat$macro$238 @ _)) => shapeless.::.apply[Option[String], Option[String] :: shapeless.HNil.type](pat$macro$237, shapeless.::.apply[Option[String], shapeless.HNil.type](pat$macro$238, shapeless.HNil))
}.asInstanceOf[anon$macro$239.this.Repr];
    def from(p: anon$macro$239.this.Repr): com.usermanagement.crud.dao.UpdateAdminUsername = p match {
      case (head: Option[String], tail: Option[String] :: shapeless.HNil)Option[String] :: Option[String] :: shapeless.HNil((pat$macro$237 @ _), (head: Option[String], tail: shapeless.HNil)Option[String] :: shapeless.HNil((pat$macro$238 @ _), shapeless.HNil)) => dao.this.UpdateAdminUsername.apply(pat$macro$237, pat$macro$238)
    }
  };
  (new anon$macro$239(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,Option[String] :: Option[String] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), Option[String], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]](anon$importedDecoder$macro$241.this.inst$macro$240)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]
    };
    new anon$importedDecoder$macro$241().inst$macro$233
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]](inst$macro$242)
}): io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UpdateAdminUsername,)])))(util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UpdateAdminUsername]).apply(((adminDetails: com.usermanagement.crud.dao.UpdateAdminUsername) => {
  (if (UserRestService.this.logger.underlying.isInfoEnabled())
    UserRestService.this.logger.underlying.info("update admin username ".+(adminDetails))
  else
    (): Unit);
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.updateAdminUsername(actor, adminDetails);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
})))

305
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
2376
2734
73
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addByNameNullaryApply(UserRestService.this.pathPrefix[Unit](UserRestService.this._segmentStringToPathMatcher("update-admin-username"))).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.usermanagement.crud.dao.UpdateAdminUsername,)](UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UpdateAdminUsername,)](UserRestService.this.entity[com.usermanagement.crud.dao.UpdateAdminUsername](UserRestService.this.as[com.usermanagement.crud.dao.UpdateAdminUsername](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]({
  val inst$macro$242: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = {
    final class anon$importedDecoder$macro$241 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$241 = {
        anon$importedDecoder$macro$241.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$240: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$233: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UpdateAdminUsername, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UpdateAdminUsername, (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,(Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$239 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): anon$macro$239 = {
      anon$macro$239.super.<init>();
      ()
    };
    type Repr = Option[String] :: Option[String] :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UpdateAdminUsername): anon$macro$239.this.Repr = p match {
  case (userId: Option[String], username: Option[String])com.usermanagement.crud.dao.UpdateAdminUsername((pat$macro$237 @ _), (pat$macro$238 @ _)) => shapeless.::.apply[Option[String], Option[String] :: shapeless.HNil.type](pat$macro$237, shapeless.::.apply[Option[String], shapeless.HNil.type](pat$macro$238, shapeless.HNil))
}.asInstanceOf[anon$macro$239.this.Repr];
    def from(p: anon$macro$239.this.Repr): com.usermanagement.crud.dao.UpdateAdminUsername = p match {
      case (head: Option[String], tail: Option[String] :: shapeless.HNil)Option[String] :: Option[String] :: shapeless.HNil((pat$macro$237 @ _), (head: Option[String], tail: shapeless.HNil)Option[String] :: shapeless.HNil((pat$macro$238 @ _), shapeless.HNil)) => dao.this.UpdateAdminUsername.apply(pat$macro$237, pat$macro$238)
    }
  };
  (new anon$macro$239(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,Option[String] :: Option[String] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), Option[String], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]](anon$importedDecoder$macro$241.this.inst$macro$240)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]
    };
    new anon$importedDecoder$macro$241().inst$macro$233
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]](inst$macro$242)
}): io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UpdateAdminUsername,)])))(util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UpdateAdminUsername]).apply(((adminDetails: com.usermanagement.crud.dao.UpdateAdminUsername) => {
  (if (UserRestService.this.logger.underlying.isInfoEnabled())
    UserRestService.this.logger.underlying.info("update admin username ".+(adminDetails))
  else
    (): Unit);
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.updateAdminUsername(actor, adminDetails);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
}))))

306
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1626
2734
72
akka.http.scaladsl.server.RouteConcatenation.RouteWithConcatenation.~
Apply
false
0
false
UserRestService.this._enhanceRouteWithConcatenation(UserRestService.this._enhanceRouteWithConcatenation(UserRestService.this._enhanceRouteWithConcatenation(server.this.Directive.addByNameNullaryApply(UserRestService.this.get).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("get-all-users"))).apply({
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.getUserDetails(actor);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
}))).~(server.this.Directive.addByNameNullaryApply(UserRestService.this.delete).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("delete-customer"))).apply(server.this.Directive.addDirectiveApply[(Option[String],)](UserRestService.this.parameters(ParameterDirectives.this.ParamMagnet.apply[akka.http.scaladsl.common.NameOptionReceptacle[String]](UserRestService.this._symbol2NR(scala.Symbol.apply("userId")).?)(ParameterDirectives.this.ParamDef.forNOR[String](unmarshalling.this.Unmarshaller.sourceOptionUnmarshaller[String, String](unmarshalling.this.Unmarshaller.identityUnmarshaller[String])))))(util.this.ApplyConverter.hac1[Option[String]]).apply(((userId: Option[String]) => {
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.deleteUser(actor, userId);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
})))))).~(server.this.Directive.addByNameNullaryApply(UserRestService.this.pathPrefix[Unit](UserRestService.this._segmentStringToPathMatcher("insert-user"))).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.entity[com.usermanagement.crud.dao.UserDetails](UserRestService.this.as[com.usermanagement.crud.dao.UserDetails](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UserDetails](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UserDetails](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UserDetails,)])))(util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UserDetails]).apply(((userDetails: com.usermanagement.crud.dao.UserDetails) => {
  (if (UserRestService.this.logger.underlying.isInfoEnabled())
    UserRestService.this.logger.underlying.info("add user details ".+(userDetails))
  else
    (): Unit);
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.addUserDetails(actor, userDetails);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
})))))).~(server.this.Directive.addByNameNullaryApply(UserRestService.this.pathPrefix[Unit](UserRestService.this._segmentStringToPathMatcher("update-admin-username"))).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.usermanagement.crud.dao.UpdateAdminUsername,)](UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UpdateAdminUsername,)](UserRestService.this.entity[com.usermanagement.crud.dao.UpdateAdminUsername](UserRestService.this.as[com.usermanagement.crud.dao.UpdateAdminUsername](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]({
  val inst$macro$242: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = {
    final class anon$importedDecoder$macro$241 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$241 = {
        anon$importedDecoder$macro$241.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$240: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$233: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UpdateAdminUsername, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UpdateAdminUsername, (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,(Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$239 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): anon$macro$239 = {
      anon$macro$239.super.<init>();
      ()
    };
    type Repr = Option[String] :: Option[String] :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UpdateAdminUsername): anon$macro$239.this.Repr = p match {
  case (userId: Option[String], username: Option[String])com.usermanagement.crud.dao.UpdateAdminUsername((pat$macro$237 @ _), (pat$macro$238 @ _)) => shapeless.::.apply[Option[String], Option[String] :: shapeless.HNil.type](pat$macro$237, shapeless.::.apply[Option[String], shapeless.HNil.type](pat$macro$238, shapeless.HNil))
}.asInstanceOf[anon$macro$239.this.Repr];
    def from(p: anon$macro$239.this.Repr): com.usermanagement.crud.dao.UpdateAdminUsername = p match {
      case (head: Option[String], tail: Option[String] :: shapeless.HNil)Option[String] :: Option[String] :: shapeless.HNil((pat$macro$237 @ _), (head: Option[String], tail: shapeless.HNil)Option[String] :: shapeless.HNil((pat$macro$238 @ _), shapeless.HNil)) => dao.this.UpdateAdminUsername.apply(pat$macro$237, pat$macro$238)
    }
  };
  (new anon$macro$239(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,Option[String] :: Option[String] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), Option[String], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]](anon$importedDecoder$macro$241.this.inst$macro$240)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]
    };
    new anon$importedDecoder$macro$241().inst$macro$233
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]](inst$macro$242)
}): io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UpdateAdminUsername,)])))(util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UpdateAdminUsername]).apply(((adminDetails: com.usermanagement.crud.dao.UpdateAdminUsername) => {
  (if (UserRestService.this.logger.underlying.isInfoEnabled())
    UserRestService.this.logger.underlying.info("update admin username ".+(adminDetails))
  else
    (): Unit);
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.updateAdminUsername(actor, adminDetails);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
})))))

307
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
userRoutes
1599
2740
48
scala.Function1.apply
Apply
false
0
false
server.this.Directive.addByNameNullaryApply(UserRestService.this.pathPrefix[Unit](UserRestService.this._segmentStringToPathMatcher("user"))).apply(UserRestService.this._enhanceRouteWithConcatenation(UserRestService.this._enhanceRouteWithConcatenation(UserRestService.this._enhanceRouteWithConcatenation(server.this.Directive.addByNameNullaryApply(UserRestService.this.get).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("get-all-users"))).apply({
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.getUserDetails(actor);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
}))).~(server.this.Directive.addByNameNullaryApply(UserRestService.this.delete).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.path[Unit](UserRestService.this._segmentStringToPathMatcher("delete-customer"))).apply(server.this.Directive.addDirectiveApply[(Option[String],)](UserRestService.this.parameters(ParameterDirectives.this.ParamMagnet.apply[akka.http.scaladsl.common.NameOptionReceptacle[String]](UserRestService.this._symbol2NR(scala.Symbol.apply("userId")).?)(ParameterDirectives.this.ParamDef.forNOR[String](unmarshalling.this.Unmarshaller.sourceOptionUnmarshaller[String, String](unmarshalling.this.Unmarshaller.identityUnmarshaller[String])))))(util.this.ApplyConverter.hac1[Option[String]]).apply(((userId: Option[String]) => {
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.deleteUser(actor, userId);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
})))))).~(server.this.Directive.addByNameNullaryApply(UserRestService.this.pathPrefix[Unit](UserRestService.this._segmentStringToPathMatcher("insert-user"))).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UserDetails,)](UserRestService.this.entity[com.usermanagement.crud.dao.UserDetails](UserRestService.this.as[com.usermanagement.crud.dao.UserDetails](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UserDetails](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UserDetails](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UserDetails]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]({
  val inst$macro$232: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = {
    final class anon$importedDecoder$macro$231 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$231 = {
        anon$importedDecoder$macro$231.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$230: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForuserId: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[String] = circe.this.Decoder.decodeString;
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userType")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("name")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForuserId.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userType")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userType")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("name")], String, String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("name")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], String, shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$219: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UserDetails, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UserDetails, (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UserDetails]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("userType"), (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")], shapeless.::.apply[Symbol @@ String("name"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UserDetails,(Symbol @@ String("userId")) :: (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$229 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UserDetails] {
    def <init>(): anon$macro$229 = {
      anon$macro$229.super.<init>();
      ()
    };
    type Repr = Option[String] :: String :: String :: String :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UserDetails): anon$macro$229.this.Repr = p match {
  case (userId: Option[String], userType: String, name: String, username: String)com.usermanagement.crud.dao.UserDetails((pat$macro$225 @ _), (pat$macro$226 @ _), (pat$macro$227 @ _), (pat$macro$228 @ _)) => shapeless.::.apply[Option[String], String :: String :: String :: shapeless.HNil.type](pat$macro$225, shapeless.::.apply[String, String :: String :: shapeless.HNil.type](pat$macro$226, shapeless.::.apply[String, String :: shapeless.HNil.type](pat$macro$227, shapeless.::.apply[String, shapeless.HNil.type](pat$macro$228, shapeless.HNil))))
}.asInstanceOf[anon$macro$229.this.Repr];
    def from(p: anon$macro$229.this.Repr): com.usermanagement.crud.dao.UserDetails = p match {
      case (head: Option[String], tail: String :: String :: String :: shapeless.HNil)Option[String] :: String :: String :: String :: shapeless.HNil((pat$macro$225 @ _), (head: String, tail: String :: String :: shapeless.HNil)String :: String :: String :: shapeless.HNil((pat$macro$226 @ _), (head: String, tail: String :: shapeless.HNil)String :: String :: shapeless.HNil((pat$macro$227 @ _), (head: String, tail: shapeless.HNil)String :: shapeless.HNil((pat$macro$228 @ _), shapeless.HNil)))) => dao.this.UserDetails.apply(pat$macro$225, pat$macro$226, pat$macro$227, pat$macro$228)
    }
  };
  (new anon$macro$229(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UserDetails,Option[String] :: String :: String :: String :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("userType")) :: (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userType"), String, (Symbol @@ String("name")) :: (Symbol @@ String("username")) :: shapeless.HNil, String :: String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("name"), String, (Symbol @@ String("username")) :: shapeless.HNil, String :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), String, shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("name")]](scala.Symbol.apply("name").asInstanceOf[Symbol @@ String("name")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("name")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userType")]](scala.Symbol.apply("userType").asInstanceOf[Symbol @@ String("userType")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userType")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("userType"),String] :: shapeless.labelled.FieldType[Symbol @@ String("name"),String] :: shapeless.labelled.FieldType[Symbol @@ String("username"),String] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userType")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("name")],String] :: String with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],String] :: shapeless.HNil]](anon$importedDecoder$macro$231.this.inst$macro$230)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]]
    };
    new anon$importedDecoder$macro$231().inst$macro$219
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UserDetails]](inst$macro$232)
}): io.circe.Decoder[com.usermanagement.crud.dao.UserDetails])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UserDetails]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UserDetails,)])))(util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UserDetails]).apply(((userDetails: com.usermanagement.crud.dao.UserDetails) => {
  (if (UserRestService.this.logger.underlying.isInfoEnabled())
    UserRestService.this.logger.underlying.info("add user details ".+(userDetails))
  else
    (): Unit);
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.addUserDetails(actor, userDetails);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
})))))).~(server.this.Directive.addByNameNullaryApply(UserRestService.this.pathPrefix[Unit](UserRestService.this._segmentStringToPathMatcher("update-admin-username"))).apply(server.this.Directive.addByNameNullaryApply(UserRestService.this.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.usermanagement.crud.dao.UpdateAdminUsername,)](UserRestService.this.put.&(server.this.ConjunctionMagnet.fromDirective[Unit, (com.usermanagement.crud.dao.UpdateAdminUsername,)](UserRestService.this.entity[com.usermanagement.crud.dao.UpdateAdminUsername](UserRestService.this.as[com.usermanagement.crud.dao.UpdateAdminUsername](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](de.heikoseeberger.akkahttpcirce.FailFastCirceSupport.unmarshaller[com.usermanagement.crud.dao.UpdateAdminUsername](circe.this.Decoder.importedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]((new io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]]((shapeless.lazily.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]({
  val inst$macro$242: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = {
    final class anon$importedDecoder$macro$241 extends AnyRef with Serializable {
      def <init>(): anon$importedDecoder$macro$241 = {
        anon$importedDecoder$macro$241.super.<init>();
        ()
      };
      <stable> <accessor> lazy val inst$macro$240: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ({
  final class $anon extends io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] {
    def <init>(): <$anon: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]> = {
      $anon.super.<init>();
      ()
    };
    private[this] val circeGenericInstanceForusername: io.circe.Decoder[Option[String]] = circe.this.Decoder.decodeOption[String](circe.this.Decoder.decodeString);
    final def apply(c: io.circe.HCursor): io.circe.Decoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("userId")), ReprDecoder.consResults[io.circe.Decoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecode(c.downField("username")), ReprDecoder.hnilResult)(io.circe.Decoder.resultInstance))(io.circe.Decoder.resultInstance);
    final override def decodeAccumulating(c: io.circe.HCursor): io.circe.AccumulatingDecoder.Result[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil] = ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("userId")], Option[String], Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("userId")), ReprDecoder.consResults[io.circe.AccumulatingDecoder.Result, Symbol with shapeless.tag.Tagged[String("username")], Option[String], shapeless.HNil]($anon.this.circeGenericInstanceForusername.tryDecodeAccumulating(c.downField("username")), ReprDecoder.hnilResultAccumulating)(io.circe.AccumulatingDecoder.resultInstance))(io.circe.AccumulatingDecoder.resultInstance)
  };
  new $anon()
}: io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]).asInstanceOf[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]];
      <stable> <accessor> lazy val inst$macro$233: io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername] = decoding.this.DerivedDecoder.deriveDecoder[com.usermanagement.crud.dao.UpdateAdminUsername, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](shapeless.this.LabelledGeneric.materializeProduct[com.usermanagement.crud.dao.UpdateAdminUsername, (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](({
  final class $anon extends AnyRef with shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): <$anon: shapeless.DefaultSymbolicLabelling[com.usermanagement.crud.dao.UpdateAdminUsername]> = {
      $anon.super.<init>();
      ()
    };
    type Out = (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil;
    def apply(): (Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil = shapeless.::.apply[Symbol @@ String("userId"), (Symbol @@ String("username")) :: shapeless.HNil.type](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")], shapeless.::.apply[Symbol @@ String("username"), shapeless.HNil.type](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")], shapeless.HNil))
  };
  new $anon()
}: shapeless.DefaultSymbolicLabelling.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,(Symbol @@ String("userId")) :: (Symbol @@ String("username")) :: shapeless.HNil]), {
  final class anon$macro$239 extends AnyRef with shapeless.Generic[com.usermanagement.crud.dao.UpdateAdminUsername] {
    def <init>(): anon$macro$239 = {
      anon$macro$239.super.<init>();
      ()
    };
    type Repr = Option[String] :: Option[String] :: shapeless.HNil;
    def to(p: com.usermanagement.crud.dao.UpdateAdminUsername): anon$macro$239.this.Repr = p match {
  case (userId: Option[String], username: Option[String])com.usermanagement.crud.dao.UpdateAdminUsername((pat$macro$237 @ _), (pat$macro$238 @ _)) => shapeless.::.apply[Option[String], Option[String] :: shapeless.HNil.type](pat$macro$237, shapeless.::.apply[Option[String], shapeless.HNil.type](pat$macro$238, shapeless.HNil))
}.asInstanceOf[anon$macro$239.this.Repr];
    def from(p: anon$macro$239.this.Repr): com.usermanagement.crud.dao.UpdateAdminUsername = p match {
      case (head: Option[String], tail: Option[String] :: shapeless.HNil)Option[String] :: Option[String] :: shapeless.HNil((pat$macro$237 @ _), (head: Option[String], tail: shapeless.HNil)Option[String] :: shapeless.HNil((pat$macro$238 @ _), shapeless.HNil)) => dao.this.UpdateAdminUsername.apply(pat$macro$237, pat$macro$238)
    }
  };
  (new anon$macro$239(): shapeless.Generic.Aux[com.usermanagement.crud.dao.UpdateAdminUsername,Option[String] :: Option[String] :: shapeless.HNil])
}, hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("userId"), Option[String], (Symbol @@ String("username")) :: shapeless.HNil, Option[String] :: shapeless.HNil, shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hconsZipWithKeys[Symbol @@ String("username"), Option[String], shapeless.HNil, shapeless.HNil, shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out](hlist.this.ZipWithKeys.hnilZipWithKeys, shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("username")]](scala.Symbol.apply("username").asInstanceOf[Symbol @@ String("username")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("username")]])), shapeless.Witness.mkWitness[Symbol with shapeless.tag.Tagged[String("userId")]](scala.Symbol.apply("userId").asInstanceOf[Symbol @@ String("userId")].asInstanceOf[Symbol with shapeless.tag.Tagged[String("userId")]])), scala.Predef.$conforms[shapeless.labelled.FieldType[Symbol @@ String("userId"),Option[String]] :: shapeless.labelled.FieldType[Symbol @@ String("username"),Option[String]] :: shapeless.ops.hlist.ZipWithKeys.hnilZipWithKeys.Out]), shapeless.Lazy.apply[io.circe.generic.decoding.ReprDecoder[Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("userId")],Option[String]] :: Option[String] with shapeless.labelled.KeyTag[Symbol with shapeless.tag.Tagged[String("username")],Option[String]] :: shapeless.HNil]](anon$importedDecoder$macro$241.this.inst$macro$240)).asInstanceOf[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]]
    };
    new anon$importedDecoder$macro$241().inst$macro$233
  };
  shapeless.Lazy.apply[io.circe.generic.decoding.DerivedDecoder[com.usermanagement.crud.dao.UpdateAdminUsername]](inst$macro$242)
}): io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername])): io.circe.export.Exported[io.circe.Decoder[com.usermanagement.crud.dao.UpdateAdminUsername]])))))))(TupleOps.this.Join.join0P[(com.usermanagement.crud.dao.UpdateAdminUsername,)])))(util.this.ApplyConverter.hac1[com.usermanagement.crud.dao.UpdateAdminUsername]).apply(((adminDetails: com.usermanagement.crud.dao.UpdateAdminUsername) => {
  (if (UserRestService.this.logger.underlying.isInfoEnabled())
    UserRestService.this.logger.underlying.info("update admin username ".+(adminDetails))
  else
    (): Unit);
  val result: scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse] = UserRestService.this.updateAdminUsername(actor, adminDetails);
  UserRestService.this.logDuration(UserRestService.this.complete(marshalling.this.ToResponseMarshallable.apply[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](result)(marshalling.this.Marshaller.futureMarshaller[akka.http.scaladsl.model.HttpResponse, akka.http.scaladsl.model.HttpResponse](marshalling.this.Marshaller.fromResponse))))
}))))))

308
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/routes/UserRestService.scala
com.usermanagement.crud.routes
UserRestService
Trait
com.usermanagement.crud.routes.UserRestService
routes
2787
2806
86
com.usermanagement.crud.routes.UserRestService.userRoutes
Apply
false
0
false
UserRestService.this.userRoutes(command)

309
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
<none>
1583
1585
47
<nosymbol>
Literal
false
0
false
40

310
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
<none>
1583
1593
47
scala.concurrent.duration.DurationConversions.seconds
Select
false
0
false
scala.concurrent.duration.`package`.DurationInt(40).seconds

311
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
<none>
1575
1594
47
akka.util.Timeout.apply
Apply
false
0
false
akka.util.Timeout.apply(scala.concurrent.duration.`package`.DurationInt(40).seconds)

312
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
1837
1854
58
com.usermanagement.crud.actor.UserActor.GetAllUserDetails
Select
false
0
false
com.usermanagement.crud.actor.UserActor.GetAllUserDetails

313
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
1827
1827
58
com.usermanagement.crud.servicehandler.UserRestServiceHandler.timeout
Select
false
0
false
UserRestServiceHandler.this.timeout

314
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
1953
1967
62
akka.http.scaladsl.model.StatusCodes.OK
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.OK

315
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
2016
2047
64
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

316
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
2130
2134
66
<nosymbol>
Literal
false
0
false
true

317
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
2192
2198
67
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

318
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
2187
2199
67
scala.Some.apply
Apply
false
0
false
scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil)

319
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
2252
2266
68
scala.Some.apply
Apply
false
0
false
scala.Some.apply[com.usermanagement.crud.actor.UserActor.GetUserDetailsSuccess](response)

320
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
2324
2343
69
com.usermanagement.crud.helper.Constants.INSERT_USER_DETAILS
Select
false
0
false
UserRestServiceHandler.this.INSERT_USER_DETAILS

321
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
2319
2344
69
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)

322
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
2086
2345
66
com.usermanagement.crud.models.ResponseFormat.generateCommonResponseForCaseClass
Apply
false
0
false
UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.GetUserDetailsSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))

323
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
2063
2346
65
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.GetUserDetailsSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)))

324
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
1990
2347
63
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.GetUserDetailsSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))))

325
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
1927
1927
61
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

326
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
1927
1927
61
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

327
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
1927
2359
61
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$1, x$3, x$2, x$4)

328
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
2401
2417
72
com.usermanagement.crud.helper.Constants.NO_DATA_RESPONSE
Select
false
0
false
UserRestServiceHandler.this.NO_DATA_RESPONSE

329
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
1867
1867
59
akka.actor.ActorSystem.dispatcher
Select
false
0
false
UserRestServiceHandler.this.system.dispatcher

330
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
getUserDetails
1824
2425
59
scala.concurrent.Future.map
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.ask(command, com.usermanagement.crud.actor.UserActor.GetAllUserDetails)(UserRestServiceHandler.this.timeout).map[akka.http.scaladsl.model.HttpResponse](((x0$1: Any) => x0$1 match {
  case (response @ (_: com.usermanagement.crud.actor.UserActor.GetUserDetailsSuccess)) => {
    <artifact> val x$1: akka.http.scaladsl.model.StatusCodes.Success = akka.http.scaladsl.model.StatusCodes.OK;
    <artifact> val x$2: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.GetUserDetailsSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
    <artifact> val x$3: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    <artifact> val x$4: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$1, x$3, x$2, x$4)
  }
  case (_: com.usermanagement.crud.actor.UserActor.NoDataFound) => UserRestServiceHandler.this.NO_DATA_RESPONSE
}))(UserRestServiceHandler.this.system.dispatcher)

331
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2702
2725
85
scala.Option.isEmpty
Select
false
0
false
userData.userId.isEmpty

332
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2733
2759
85
java.util.UUID.toString
Apply
false
0
false
java.util.UUID.randomUUID().toString()

333
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2728
2760
85
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](java.util.UUID.randomUUID().toString())

334
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2728
2760
85
scala.Some.apply
Block
true
0
false
scala.Some.apply[String](java.util.UUID.randomUUID().toString())

335
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2774
2789
86
com.usermanagement.crud.dao.UserDetails.userId
Select
false
0
false
userData.userId

336
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2774
2789
86
com.usermanagement.crud.dao.UserDetails.userId
Block
true
0
false
userData.userId

337
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2823
2843
87
scala.Option.getOrElse
Apply
false
0
false
userId.getOrElse[String]("")

338
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2808
2844
87
com.usermanagement.crud.actor.UserActor.ValidateUserId.apply
Apply
false
0
false
com.usermanagement.crud.actor.UserActor.ValidateUserId.apply(userId.getOrElse[String](""))

339
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2798
2798
87
com.usermanagement.crud.servicehandler.UserRestServiceHandler.timeout
Select
false
0
false
UserRestServiceHandler.this.timeout

340
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2941
2961
91
akka.http.scaladsl.model.StatusCodes.Conflict
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.Conflict

341
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3009
3040
93
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

342
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3120
3130
95
scala.Option.get
Select
false
0
false
userId.get

343
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3178
3193
96
com.usermanagement.crud.helper.Constants.INVALID_USER_ID
Select
false
0
false
UserRestServiceHandler.this.INVALID_USER_ID

344
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3246
3265
97
com.usermanagement.crud.helper.Constants.INSERT_USER_DETAILS
Select
false
0
false
UserRestServiceHandler.this.INSERT_USER_DETAILS

345
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3241
3266
97
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)

346
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3101
3267
95
com.usermanagement.crud.models.ResponseFormat.sendFormattedError
Apply
false
0
false
UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))

347
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3067
3268
94
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)))

348
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2998
3269
93
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))))

349
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2915
2915
90
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

350
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2915
2915
90
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

351
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2915
3281
90
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$5, x$7, x$6, x$8)

352
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2886
3282
89
scala.concurrent.Future.successful
Apply
false
0
false
scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
  <artifact> val x$5: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
  <artifact> val x$6: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
  <artifact> val x$7: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  <artifact> val x$8: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$5, x$7, x$6, x$8)
})

353
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3351
3354
100
<nosymbol>
Literal
false
0
false
" "

354
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3356
3358
100
<nosymbol>
Literal
false
0
false
""

355
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3375
3383
100
com.usermanagement.crud.helper.Constants.CUSTOMER
Select
false
0
false
UserRestServiceHandler.this.CUSTOMER

356
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3322
3383
100
java.lang.Object.==
Apply
false
0
false
userData.userType.replaceAll(" ", "").toLowerCase().==(UserRestServiceHandler.this.CUSTOMER)

357
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3457
3465
101
com.usermanagement.crud.helper.Constants.CUSTOMER
Select
false
0
false
UserRestServiceHandler.this.CUSTOMER

358
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3424
3424
101
com.usermanagement.crud.dao.UserDetails.copy$default$3
Select
false
0
false
userData.copy$default$3

359
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3424
3424
101
com.usermanagement.crud.dao.UserDetails.copy$default$4
Select
false
0
false
userData.copy$default$4

360
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3415
3466
101
com.usermanagement.crud.dao.UserDetails.copy
Apply
false
0
false
userData.copy(userId, UserRestServiceHandler.this.CUSTOMER, userData.copy$default$3, userData.copy$default$4)

361
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3477
3516
102
com.usermanagement.crud.servicehandler.UserRestServiceHandler.insertUserDetails
Apply
false
0
false
UserRestServiceHandler.this.insertUserDetails(command, userDetails)

362
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3385
3526
100
<nosymbol>
Block
true
0
false
{
  val userDetails: com.usermanagement.crud.dao.UserDetails = userData.copy(userId, UserRestServiceHandler.this.CUSTOMER, userData.copy$default$3, userData.copy$default$4);
  UserRestServiceHandler.this.insertUserDetails(command, userDetails)
}

363
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3565
3568
103
<nosymbol>
Literal
false
0
false
" "

364
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3570
3572
103
<nosymbol>
Literal
false
0
false
""

365
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3589
3594
103
com.usermanagement.crud.helper.Constants.ADMIN
Select
false
0
false
UserRestServiceHandler.this.ADMIN

366
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3536
3594
103
java.lang.Object.==
Apply
false
0
false
userData.userType.replaceAll(" ", "").toLowerCase().==(UserRestServiceHandler.this.ADMIN)

367
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3668
3673
104
com.usermanagement.crud.helper.Constants.ADMIN
Select
false
0
false
UserRestServiceHandler.this.ADMIN

368
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3635
3635
104
com.usermanagement.crud.dao.UserDetails.copy$default$3
Select
false
0
false
userData.copy$default$3

369
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3635
3635
104
com.usermanagement.crud.dao.UserDetails.copy$default$4
Select
false
0
false
userData.copy$default$4

370
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3626
3674
104
com.usermanagement.crud.dao.UserDetails.copy
Apply
false
0
false
userData.copy(userId, UserRestServiceHandler.this.ADMIN, userData.copy$default$3, userData.copy$default$4)

371
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3685
3724
105
com.usermanagement.crud.servicehandler.UserRestServiceHandler.insertUserDetails
Apply
false
0
false
UserRestServiceHandler.this.insertUserDetails(command, userDetails)

372
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3596
3734
103
<nosymbol>
Block
true
0
false
{
  val userDetails: com.usermanagement.crud.dao.UserDetails = userData.copy(userId, UserRestServiceHandler.this.ADMIN, userData.copy$default$3, userData.copy$default$4);
  UserRestServiceHandler.this.insertUserDetails(command, userDetails)
}

373
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3811
3831
109
akka.http.scaladsl.model.StatusCodes.Conflict
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.Conflict

374
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3883
3914
111
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

375
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3998
4008
113
scala.Option.get
Select
false
0
false
userId.get

376
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
4058
4075
114
com.usermanagement.crud.helper.Constants.INVALID_USER_TYPE
Select
false
0
false
UserRestServiceHandler.this.INVALID_USER_TYPE

377
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
4130
4149
115
com.usermanagement.crud.helper.Constants.INSERT_USER_DETAILS
Select
false
0
false
UserRestServiceHandler.this.INSERT_USER_DETAILS

378
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
4125
4150
115
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)

379
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3979
4151
113
com.usermanagement.crud.models.ResponseFormat.sendFormattedError
Apply
false
0
false
UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_TYPE, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))

380
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3943
4152
112
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_TYPE, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)))

381
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3872
4153
111
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_TYPE, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))))

382
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3783
3783
108
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

383
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3783
3783
108
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

384
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3783
4167
108
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$9, x$11, x$10, x$12)

385
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3752
4168
107
scala.concurrent.Future.successful
Apply
false
0
false
scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
  <artifact> val x$9: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
  <artifact> val x$10: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_TYPE, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
  <artifact> val x$11: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  <artifact> val x$12: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$9, x$11, x$10, x$12)
})

386
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3752
4168
107
scala.concurrent.Future.successful
Block
true
0
false
scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
  <artifact> val x$9: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
  <artifact> val x$10: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_TYPE, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
  <artifact> val x$11: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  <artifact> val x$12: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$9, x$11, x$10, x$12)
})

387
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
3532
4178
103
<nosymbol>
If
true
0
false
if (userData.userType.replaceAll(" ", "").toLowerCase().==(UserRestServiceHandler.this.ADMIN))
  {
    val userDetails: com.usermanagement.crud.dao.UserDetails = userData.copy(userId, UserRestServiceHandler.this.ADMIN, userData.copy$default$3, userData.copy$default$4);
    UserRestServiceHandler.this.insertUserDetails(command, userDetails)
  }
else
  scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
    <artifact> val x$9: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
    <artifact> val x$10: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_TYPE, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
    <artifact> val x$11: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    <artifact> val x$12: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$9, x$11, x$10, x$12)
  })

388
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2850
2850
87
akka.actor.ActorSystem.dispatcher
Select
false
0
false
UserRestServiceHandler.this.system.dispatcher

389
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
4185
4185
118
scala.Predef.$conforms
TypeApply
false
0
false
scala.Predef.$conforms[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]]

390
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
addUserDetails
2795
4192
118
scala.concurrent.Future.flatten
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.ask(command, com.usermanagement.crud.actor.UserActor.ValidateUserId.apply(userId.getOrElse[String]("")))(UserRestServiceHandler.this.timeout).map[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](((x0$2: Any) => x0$2 match {
  case (isValid: Boolean)com.usermanagement.crud.actor.UserActor.Valid(true) => scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
    <artifact> val x$5: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
    <artifact> val x$6: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
    <artifact> val x$7: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    <artifact> val x$8: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$5, x$7, x$6, x$8)
  })
  case (isValid: Boolean)com.usermanagement.crud.actor.UserActor.Valid(false) => if (userData.userType.replaceAll(" ", "").toLowerCase().==(UserRestServiceHandler.this.CUSTOMER))
    {
      val userDetails: com.usermanagement.crud.dao.UserDetails = userData.copy(userId, UserRestServiceHandler.this.CUSTOMER, userData.copy$default$3, userData.copy$default$4);
      UserRestServiceHandler.this.insertUserDetails(command, userDetails)
    }
  else
    if (userData.userType.replaceAll(" ", "").toLowerCase().==(UserRestServiceHandler.this.ADMIN))
      {
        val userDetails: com.usermanagement.crud.dao.UserDetails = userData.copy(userId, UserRestServiceHandler.this.ADMIN, userData.copy$default$3, userData.copy$default$4);
        UserRestServiceHandler.this.insertUserDetails(command, userDetails)
      }
    else
      scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
        <artifact> val x$9: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
        <artifact> val x$10: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_TYPE, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
        <artifact> val x$11: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
        <artifact> val x$12: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
        akka.http.scaladsl.model.HttpResponse.apply(x$9, x$11, x$10, x$12)
      })
}))(UserRestServiceHandler.this.system.dispatcher).flatten[akka.http.scaladsl.model.HttpResponse](scala.Predef.$conforms[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]])

391
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4485
4515
129
com.usermanagement.crud.actor.UserActor.InsertUserDetails.apply
Apply
false
0
false
com.usermanagement.crud.actor.UserActor.InsertUserDetails.apply(userDetails)

392
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4475
4475
129
com.usermanagement.crud.servicehandler.UserRestServiceHandler.timeout
Select
false
0
false
UserRestServiceHandler.this.timeout

393
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4594
4613
132
akka.http.scaladsl.model.StatusCodes.Created
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.Created

394
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4658
4689
134
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

395
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4768
4772
136
<nosymbol>
Literal
false
0
false
true

396
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4828
4834
137
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

397
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4823
4835
137
scala.Some.apply
Apply
false
0
false
scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil)

398
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4886
4900
138
scala.Some.apply
Apply
false
0
false
scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response)

399
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4956
4975
139
com.usermanagement.crud.helper.Constants.INSERT_USER_DETAILS
Select
false
0
false
UserRestServiceHandler.this.INSERT_USER_DETAILS

400
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4951
4976
139
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)

401
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4724
4977
136
com.usermanagement.crud.models.ResponseFormat.generateCommonResponseForCaseClass
Apply
false
0
false
UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))

402
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4703
4978
135
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)))

403
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4634
4979
133
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))))

404
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4570
4570
131
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

405
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4570
4570
131
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

406
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4570
4989
131
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$13, x$15, x$14, x$16)

407
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5061
5082
143
akka.http.scaladsl.model.StatusCodes.Forbidden
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.Forbidden

408
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5127
5158
145
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

409
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5237
5241
147
<nosymbol>
Literal
false
0
false
true

410
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5297
5303
148
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

411
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5292
5304
148
scala.Some.apply
Apply
false
0
false
scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil)

412
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5355
5369
149
scala.Some.apply
Apply
false
0
false
scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response)

413
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5425
5444
150
com.usermanagement.crud.helper.Constants.INSERT_USER_DETAILS
Select
false
0
false
UserRestServiceHandler.this.INSERT_USER_DETAILS

414
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5420
5445
150
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)

415
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5193
5446
147
com.usermanagement.crud.models.ResponseFormat.generateCommonResponseForCaseClass
Apply
false
0
false
UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))

416
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5172
5447
146
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)))

417
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5103
5448
144
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))))

418
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5037
5037
142
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

419
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5037
5037
142
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

420
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
5037
5458
142
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$17, x$19, x$18, x$20)

421
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4521
4521
129
akka.actor.ActorSystem.dispatcher
Select
false
0
false
UserRestServiceHandler.this.system.dispatcher

422
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
insertUserDetails
4472
5464
129
scala.concurrent.Future.map
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.ask(command, com.usermanagement.crud.actor.UserActor.InsertUserDetails.apply(userDetails))(UserRestServiceHandler.this.timeout).map[akka.http.scaladsl.model.HttpResponse](((x0$3: Any) => x0$3 match {
  case (response @ (_: com.usermanagement.crud.actor.UserActor.CommandSuccess)) => {
    <artifact> val x$13: akka.http.scaladsl.model.StatusCodes.Success = akka.http.scaladsl.model.StatusCodes.Created;
    <artifact> val x$14: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
    <artifact> val x$15: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    <artifact> val x$16: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$13, x$15, x$14, x$16)
  }
  case (response @ (_: com.usermanagement.crud.actor.UserActor.CommandFailure)) => {
    <artifact> val x$17: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Forbidden;
    <artifact> val x$18: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
    <artifact> val x$19: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    <artifact> val x$20: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$17, x$19, x$18, x$20)
  }
}))(UserRestServiceHandler.this.system.dispatcher)

423
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
5759
5785
164
com.usermanagement.crud.dao.UpdateAdminUsername.userId
Select
false
0
false
updateAdminUsername.userId

424
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
5794
5828
165
scala.Option.isEmpty
Select
false
0
false
updateAdminUsername.userId.isEmpty

425
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
5889
5909
168
akka.http.scaladsl.model.StatusCodes.Conflict
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.Conflict

426
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
5941
5972
169
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

427
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6062
6069
171
<nosymbol>
Literal
false
0
false
"empty"

428
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6122
6147
172
com.usermanagement.crud.helper.Constants.INVALID_USER_ID_FOR_ADMIN
Select
false
0
false
UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN

429
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6205
6224
173
com.usermanagement.crud.helper.Constants.INSERT_USER_DETAILS
Select
false
0
false
UserRestServiceHandler.this.INSERT_USER_DETAILS

430
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6200
6225
173
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)

431
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6043
6226
171
com.usermanagement.crud.models.ResponseFormat.sendFormattedError
Apply
false
0
false
UserRestServiceHandler.this.sendFormattedError("empty", UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))

432
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6004
6227
170
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError("empty", UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)))

433
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
5930
6228
169
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError("empty", UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))))

434
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
5865
5865
167
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

435
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
5865
5865
167
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

436
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
5865
6238
167
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$21, x$23, x$22, x$24)

437
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
5838
6239
166
scala.concurrent.Future.successful
Apply
false
0
false
scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
  <artifact> val x$21: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
  <artifact> val x$22: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError("empty", UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
  <artifact> val x$23: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  <artifact> val x$24: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$21, x$23, x$22, x$24)
})

438
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
5838
6239
166
scala.concurrent.Future.successful
Block
true
0
false
scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
  <artifact> val x$21: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
  <artifact> val x$22: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError("empty", UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
  <artifact> val x$23: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  <artifact> val x$24: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$21, x$23, x$22, x$24)
})

439
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6289
6299
176
scala.Option.get
Select
false
0
false
userId.get

440
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6301
6306
176
com.usermanagement.crud.helper.Constants.ADMIN
Select
false
0
false
UserRestServiceHandler.this.ADMIN

441
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6272
6307
176
com.usermanagement.crud.actor.UserActor.ValidateUserType.apply
Apply
false
0
false
com.usermanagement.crud.actor.UserActor.ValidateUserType.apply(userId.get, UserRestServiceHandler.this.ADMIN)

442
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6262
6262
176
com.usermanagement.crud.servicehandler.UserRestServiceHandler.timeout
Select
false
0
false
UserRestServiceHandler.this.timeout

443
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6368
6396
178
com.usermanagement.crud.dao.UpdateAdminUsername.username
Select
false
0
false
updateAdminUsername.username

444
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6411
6427
179
scala.Option.isEmpty
Select
false
0
false
username.isEmpty

445
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6506
6526
182
akka.http.scaladsl.model.StatusCodes.Conflict
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.Conflict

446
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6582
6613
184
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

447
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6701
6711
186
scala.Option.get
Select
false
0
false
userId.get

448
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6763
6779
187
com.usermanagement.crud.helper.Constants.INVALID_USERNAME
Select
false
0
false
UserRestServiceHandler.this.INVALID_USERNAME

449
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6836
6855
188
com.usermanagement.crud.helper.Constants.INSERT_USER_DETAILS
Select
false
0
false
UserRestServiceHandler.this.INSERT_USER_DETAILS

450
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6831
6856
188
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)

451
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6682
6857
186
com.usermanagement.crud.models.ResponseFormat.sendFormattedError
Apply
false
0
false
UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USERNAME, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))

452
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6644
6858
185
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USERNAME, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)))

453
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6571
6859
184
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USERNAME, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))))

454
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6476
6476
181
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

455
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6476
6476
181
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

456
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6476
6875
181
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$25, x$27, x$26, x$28)

457
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6443
6876
180
scala.concurrent.Future.successful
Apply
false
0
false
scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
  <artifact> val x$25: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
  <artifact> val x$26: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USERNAME, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
  <artifact> val x$27: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  <artifact> val x$28: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$25, x$27, x$26, x$28)
})

458
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6443
6876
180
scala.concurrent.Future.successful
Block
true
0
false
scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
  <artifact> val x$25: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
  <artifact> val x$26: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USERNAME, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
  <artifact> val x$27: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  <artifact> val x$28: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$25, x$27, x$26, x$28)
})

459
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6944
6954
191
scala.Option.get
Select
false
0
false
userId.get

460
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6956
6968
191
scala.Option.get
Select
false
0
false
username.get

461
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6908
6969
191
com.usermanagement.crud.servicehandler.UserRestServiceHandler.updateAdminUsernameRequest
Apply
false
0
false
UserRestServiceHandler.this.updateAdminUsernameRequest(command, userId.get, username.get)

462
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6908
6969
191
com.usermanagement.crud.servicehandler.UserRestServiceHandler.updateAdminUsernameRequest
Block
true
0
false
UserRestServiceHandler.this.updateAdminUsernameRequest(command, userId.get, username.get)

463
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7080
7100
196
akka.http.scaladsl.model.StatusCodes.Conflict
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.Conflict

464
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7152
7183
198
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

465
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7267
7277
200
scala.Option.get
Select
false
0
false
userId.get

466
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7327
7352
201
com.usermanagement.crud.helper.Constants.INVALID_USER_ID_FOR_ADMIN
Select
false
0
false
UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN

467
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7407
7426
202
com.usermanagement.crud.helper.Constants.INSERT_USER_DETAILS
Select
false
0
false
UserRestServiceHandler.this.INSERT_USER_DETAILS

468
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7402
7427
202
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)

469
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7248
7428
200
com.usermanagement.crud.models.ResponseFormat.sendFormattedError
Apply
false
0
false
UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))

470
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7212
7429
199
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)))

471
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7141
7430
198
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))))

472
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7052
7052
195
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

473
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7052
7052
195
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

474
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7052
7444
195
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$29, x$31, x$30, x$32)

475
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7021
7445
194
scala.concurrent.Future.successful
Apply
false
0
false
scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
  <artifact> val x$29: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
  <artifact> val x$30: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
  <artifact> val x$31: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  <artifact> val x$32: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$29, x$31, x$30, x$32)
})

476
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6313
6313
176
akka.actor.ActorSystem.dispatcher
Select
false
0
false
UserRestServiceHandler.this.system.dispatcher

477
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
7454
7454
204
scala.Predef.$conforms
TypeApply
false
0
false
scala.Predef.$conforms[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]]

478
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6259
7461
204
scala.concurrent.Future.flatten
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.ask(command, com.usermanagement.crud.actor.UserActor.ValidateUserType.apply(userId.get, UserRestServiceHandler.this.ADMIN))(UserRestServiceHandler.this.timeout).map[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](((x0$4: Any) => x0$4 match {
  case (isValid: Boolean)com.usermanagement.crud.actor.UserActor.Valid(true) => {
    val username: Option[String] = updateAdminUsername.username;
    if (username.isEmpty)
      scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
        <artifact> val x$25: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
        <artifact> val x$26: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USERNAME, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
        <artifact> val x$27: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
        <artifact> val x$28: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
        akka.http.scaladsl.model.HttpResponse.apply(x$25, x$27, x$26, x$28)
      })
    else
      UserRestServiceHandler.this.updateAdminUsernameRequest(command, userId.get, username.get)
  }
  case (isValid: Boolean)com.usermanagement.crud.actor.UserActor.Valid(false) => scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
    <artifact> val x$29: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
    <artifact> val x$30: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
    <artifact> val x$31: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    <artifact> val x$32: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$29, x$31, x$30, x$32)
  })
}))(UserRestServiceHandler.this.system.dispatcher).flatten[akka.http.scaladsl.model.HttpResponse](scala.Predef.$conforms[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]])

479
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsername
6259
7461
204
scala.concurrent.Future.flatten
Block
true
0
false
akka.pattern.`package`.ask(command, com.usermanagement.crud.actor.UserActor.ValidateUserType.apply(userId.get, UserRestServiceHandler.this.ADMIN))(UserRestServiceHandler.this.timeout).map[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](((x0$4: Any) => x0$4 match {
  case (isValid: Boolean)com.usermanagement.crud.actor.UserActor.Valid(true) => {
    val username: Option[String] = updateAdminUsername.username;
    if (username.isEmpty)
      scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
        <artifact> val x$25: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
        <artifact> val x$26: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USERNAME, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
        <artifact> val x$27: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
        <artifact> val x$28: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
        akka.http.scaladsl.model.HttpResponse.apply(x$25, x$27, x$26, x$28)
      })
    else
      UserRestServiceHandler.this.updateAdminUsernameRequest(command, userId.get, username.get)
  }
  case (isValid: Boolean)com.usermanagement.crud.actor.UserActor.Valid(false) => scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
    <artifact> val x$29: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
    <artifact> val x$30: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID_FOR_ADMIN, scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
    <artifact> val x$31: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    <artifact> val x$32: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$29, x$31, x$30, x$32)
  })
}))(UserRestServiceHandler.this.system.dispatcher).flatten[akka.http.scaladsl.model.HttpResponse](scala.Predef.$conforms[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]])

480
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
7873
7878
218
com.usermanagement.crud.helper.Constants.ADMIN
Select
false
0
false
UserRestServiceHandler.this.ADMIN

481
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
7832
7879
218
com.usermanagement.crud.actor.UserActor.UpdateUsernameForAdmin.apply
Apply
false
0
false
com.usermanagement.crud.actor.UserActor.UpdateUsernameForAdmin.apply(userId, username, UserRestServiceHandler.this.ADMIN)

482
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
7822
7822
218
com.usermanagement.crud.servicehandler.UserRestServiceHandler.timeout
Select
false
0
false
UserRestServiceHandler.this.timeout

483
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
7958
7977
221
akka.http.scaladsl.model.StatusCodes.Created
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.Created

484
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8022
8053
223
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

485
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8132
8136
225
<nosymbol>
Literal
false
0
false
true

486
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8192
8198
226
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

487
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8187
8199
226
scala.Some.apply
Apply
false
0
false
scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil)

488
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8250
8264
227
scala.Some.apply
Apply
false
0
false
scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response)

489
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8320
8339
228
com.usermanagement.crud.helper.Constants.INSERT_USER_DETAILS
Select
false
0
false
UserRestServiceHandler.this.INSERT_USER_DETAILS

490
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8315
8340
228
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)

491
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8088
8341
225
com.usermanagement.crud.models.ResponseFormat.generateCommonResponseForCaseClass
Apply
false
0
false
UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))

492
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8067
8342
224
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)))

493
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
7998
8343
222
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))))

494
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
7934
7934
220
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

495
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
7934
7934
220
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

496
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
7934
8353
220
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$33, x$35, x$34, x$36)

497
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8425
8446
232
akka.http.scaladsl.model.StatusCodes.Forbidden
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.Forbidden

498
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8491
8522
234
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

499
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8601
8605
236
<nosymbol>
Literal
false
0
false
true

500
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8661
8667
237
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

501
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8656
8668
237
scala.Some.apply
Apply
false
0
false
scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil)

502
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8719
8733
238
scala.Some.apply
Apply
false
0
false
scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response)

503
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8789
8808
239
com.usermanagement.crud.helper.Constants.INSERT_USER_DETAILS
Select
false
0
false
UserRestServiceHandler.this.INSERT_USER_DETAILS

504
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8784
8809
239
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)

505
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8557
8810
236
com.usermanagement.crud.models.ResponseFormat.generateCommonResponseForCaseClass
Apply
false
0
false
UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))

506
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8536
8811
235
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS)))

507
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8467
8812
233
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))))

508
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8401
8401
231
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

509
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8401
8401
231
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

510
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
8401
8822
231
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$37, x$39, x$38, x$40)

511
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
7885
7885
218
akka.actor.ActorSystem.dispatcher
Select
false
0
false
UserRestServiceHandler.this.system.dispatcher

512
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
updateAdminUsernameRequest
7819
8828
218
scala.concurrent.Future.map
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.ask(command, com.usermanagement.crud.actor.UserActor.UpdateUsernameForAdmin.apply(userId, username, UserRestServiceHandler.this.ADMIN))(UserRestServiceHandler.this.timeout).map[akka.http.scaladsl.model.HttpResponse](((x0$5: Any) => x0$5 match {
  case (response @ (_: com.usermanagement.crud.actor.UserActor.CommandSuccess)) => {
    <artifact> val x$33: akka.http.scaladsl.model.StatusCodes.Success = akka.http.scaladsl.model.StatusCodes.Created;
    <artifact> val x$34: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
    <artifact> val x$35: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    <artifact> val x$36: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$33, x$35, x$34, x$36)
  }
  case (response @ (_: com.usermanagement.crud.actor.UserActor.CommandFailure)) => {
    <artifact> val x$37: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Forbidden;
    <artifact> val x$38: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.INSERT_USER_DETAILS))));
    <artifact> val x$39: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    <artifact> val x$40: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$37, x$39, x$38, x$40)
  }
}))(UserRestServiceHandler.this.system.dispatcher)

513
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9109
9129
253
scala.Option.getOrElse
Apply
false
0
false
userId.getOrElse[String]("")

514
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9131
9139
253
com.usermanagement.crud.helper.Constants.CUSTOMER
Select
false
0
false
UserRestServiceHandler.this.CUSTOMER

515
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9092
9140
253
com.usermanagement.crud.actor.UserActor.ValidateUserType.apply
Apply
false
0
false
com.usermanagement.crud.actor.UserActor.ValidateUserType.apply(userId.getOrElse[String](""), UserRestServiceHandler.this.CUSTOMER)

516
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9082
9082
253
com.usermanagement.crud.servicehandler.UserRestServiceHandler.timeout
Select
false
0
false
UserRestServiceHandler.this.timeout

517
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9206
9216
255
scala.Option.get
Select
false
0
false
userId.get

518
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9218
9226
255
com.usermanagement.crud.helper.Constants.CUSTOMER
Select
false
0
false
UserRestServiceHandler.this.CUSTOMER

519
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9195
9227
255
com.usermanagement.crud.actor.UserActor.DeleteUser.apply
Apply
false
0
false
com.usermanagement.crud.actor.UserActor.DeleteUser.apply(userId.get, UserRestServiceHandler.this.CUSTOMER)

520
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9185
9185
255
com.usermanagement.crud.servicehandler.UserRestServiceHandler.timeout
Select
false
0
false
UserRestServiceHandler.this.timeout

521
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9318
9337
258
akka.http.scaladsl.model.StatusCodes.Created
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.Created

522
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9390
9421
260
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

523
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9508
9512
262
<nosymbol>
Literal
false
0
false
true

524
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9572
9578
263
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

525
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9567
9579
263
scala.Some.apply
Apply
false
0
false
scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil)

526
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9634
9648
264
scala.Some.apply
Apply
false
0
false
scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response)

527
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9708
9723
265
com.usermanagement.crud.helper.Constants.DELETE_CUSTOMER
Select
false
0
false
UserRestServiceHandler.this.DELETE_CUSTOMER

528
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9703
9724
265
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER)

529
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9464
9725
262
com.usermanagement.crud.models.ResponseFormat.generateCommonResponseForCaseClass
Apply
false
0
false
UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER))

530
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9439
9726
261
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER)))

531
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9362
9727
259
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER))))

532
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9290
9290
257
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

533
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9290
9290
257
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

534
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9290
9741
257
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$41, x$43, x$42, x$44)

535
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9825
9846
269
akka.http.scaladsl.model.StatusCodes.Forbidden
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.Forbidden

536
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9899
9930
271
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

537
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10017
10021
273
<nosymbol>
Literal
false
0
false
true

538
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10081
10087
274
scala.collection.immutable.Nil
Select
false
0
false
scala.collection.immutable.Nil

539
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10076
10088
274
scala.Some.apply
Apply
false
0
false
scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil)

540
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10143
10157
275
scala.Some.apply
Apply
false
0
false
scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response)

541
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10217
10232
276
com.usermanagement.crud.helper.Constants.DELETE_CUSTOMER
Select
false
0
false
UserRestServiceHandler.this.DELETE_CUSTOMER

542
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10212
10233
276
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER)

543
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9973
10234
273
com.usermanagement.crud.models.ResponseFormat.generateCommonResponseForCaseClass
Apply
false
0
false
UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER))

544
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9948
10235
272
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER)))

545
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9871
10236
270
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER))))

546
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9797
9797
268
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

547
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9797
9797
268
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

548
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9797
10250
268
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$45, x$47, x$46, x$48)

549
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9233
9233
255
akka.actor.ActorSystem.dispatcher
Select
false
0
false
UserRestServiceHandler.this.system.dispatcher

550
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9182
10260
255
scala.concurrent.Future.map
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.ask(command, com.usermanagement.crud.actor.UserActor.DeleteUser.apply(userId.get, UserRestServiceHandler.this.CUSTOMER))(UserRestServiceHandler.this.timeout).map[akka.http.scaladsl.model.HttpResponse](((x0$7: Any) => x0$7 match {
  case (response @ (_: com.usermanagement.crud.actor.UserActor.CommandSuccess)) => {
    <artifact> val x$41: akka.http.scaladsl.model.StatusCodes.Success = akka.http.scaladsl.model.StatusCodes.Created;
    <artifact> val x$42: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER))));
    <artifact> val x$43: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    <artifact> val x$44: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$41, x$43, x$42, x$44)
  }
  case (response @ (_: com.usermanagement.crud.actor.UserActor.CommandFailure)) => {
    <artifact> val x$45: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Forbidden;
    <artifact> val x$46: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER))));
    <artifact> val x$47: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    <artifact> val x$48: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$45, x$47, x$46, x$48)
  }
}))(UserRestServiceHandler.this.system.dispatcher)

551
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10351
10371
282
akka.http.scaladsl.model.StatusCodes.Conflict
Select
false
0
false
akka.http.scaladsl.model.StatusCodes.Conflict

552
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10419
10450
284
akka.http.scaladsl.model.ContentTypes.application/json
Select
false
0
false
akka.http.scaladsl.model.ContentTypes.application/json

553
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10530
10540
286
scala.Option.get
Select
false
0
false
userId.get

554
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10588
10616
287
com.usermanagement.crud.helper.Constants.INVALID_USER_ID_FOR_CUSTOMER
Select
false
0
false
UserRestServiceHandler.this.INVALID_USER_ID_FOR_CUSTOMER

555
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10669
10684
288
com.usermanagement.crud.helper.Constants.DELETE_CUSTOMER
Select
false
0
false
UserRestServiceHandler.this.DELETE_CUSTOMER

556
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10664
10685
288
scala.Some.apply
Apply
false
0
false
scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER)

557
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10511
10686
286
com.usermanagement.crud.models.ResponseFormat.sendFormattedError
Apply
false
0
false
UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID_FOR_CUSTOMER, scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER))

558
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10477
10687
285
com.usermanagement.crud.models.Helper.write
Apply
false
0
false
UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID_FOR_CUSTOMER, scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER)))

559
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10408
10688
284
akka.http.scaladsl.model.HttpEntity.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID_FOR_CUSTOMER, scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER))))

560
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10325
10325
281
akka.http.scaladsl.model.HttpResponse.apply$default$2
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$2

561
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10325
10325
281
akka.http.scaladsl.model.HttpResponse.apply$default$4
Select
false
0
false
akka.http.scaladsl.model.HttpResponse.apply$default$4

562
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10325
10700
281
akka.http.scaladsl.model.HttpResponse.apply
Apply
false
0
false
akka.http.scaladsl.model.HttpResponse.apply(x$49, x$51, x$50, x$52)

563
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10296
10701
280
scala.concurrent.Future.successful
Apply
false
0
false
scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
  <artifact> val x$49: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
  <artifact> val x$50: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID_FOR_CUSTOMER, scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER))));
  <artifact> val x$51: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  <artifact> val x$52: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$49, x$51, x$50, x$52)
})

564
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9146
9146
253
akka.actor.ActorSystem.dispatcher
Select
false
0
false
UserRestServiceHandler.this.system.dispatcher

565
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
10708
10708
290
scala.Predef.$conforms
TypeApply
false
0
false
scala.Predef.$conforms[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]]

566
/home/knoldus/Assignment/SCala/UserManagementSystem/crud/src/main/scala/com/usermanagement/crud/servicehandler/UserRestServiceHandler.scala
com.usermanagement.crud.servicehandler
UserRestServiceHandler
Trait
com.usermanagement.crud.servicehandler.UserRestServiceHandler
deleteUser
9079
10715
290
scala.concurrent.Future.flatten
ApplyToImplicitArgs
false
0
false
akka.pattern.`package`.ask(command, com.usermanagement.crud.actor.UserActor.ValidateUserType.apply(userId.getOrElse[String](""), UserRestServiceHandler.this.CUSTOMER))(UserRestServiceHandler.this.timeout).map[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]](((x0$6: Any) => x0$6 match {
  case (isValid: Boolean)com.usermanagement.crud.actor.UserActor.Valid(true) => akka.pattern.`package`.ask(command, com.usermanagement.crud.actor.UserActor.DeleteUser.apply(userId.get, UserRestServiceHandler.this.CUSTOMER))(UserRestServiceHandler.this.timeout).map[akka.http.scaladsl.model.HttpResponse](((x0$7: Any) => x0$7 match {
    case (response @ (_: com.usermanagement.crud.actor.UserActor.CommandSuccess)) => {
      <artifact> val x$41: akka.http.scaladsl.model.StatusCodes.Success = akka.http.scaladsl.model.StatusCodes.Created;
      <artifact> val x$42: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandSuccess](response), scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER))));
      <artifact> val x$43: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      <artifact> val x$44: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$41, x$43, x$42, x$44)
    }
    case (response @ (_: com.usermanagement.crud.actor.UserActor.CommandFailure)) => {
      <artifact> val x$45: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Forbidden;
      <artifact> val x$46: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForCaseClass](UserRestServiceHandler.this.generateCommonResponseForCaseClass(true, scala.Some.apply[List[Nothing]](scala.collection.immutable.Nil), scala.Some.apply[com.usermanagement.crud.actor.UserActor.CommandFailure](response), scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER))));
      <artifact> val x$47: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      <artifact> val x$48: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$45, x$47, x$46, x$48)
    }
  }))(UserRestServiceHandler.this.system.dispatcher)
  case (isValid: Boolean)com.usermanagement.crud.actor.UserActor.Valid(false) => scala.concurrent.Future.successful[akka.http.scaladsl.model.HttpResponse]({
    <artifact> val x$49: akka.http.scaladsl.model.StatusCodes.ClientError = akka.http.scaladsl.model.StatusCodes.Conflict;
    <artifact> val x$50: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(akka.http.scaladsl.model.ContentTypes.application/json, UserRestServiceHandler.this.write[com.usermanagement.crud.models.ResponsesConfiguration.StandardResponseForStringError](UserRestServiceHandler.this.sendFormattedError(userId.get, UserRestServiceHandler.this.INVALID_USER_ID_FOR_CUSTOMER, scala.Some.apply[String](UserRestServiceHandler.this.DELETE_CUSTOMER))));
    <artifact> val x$51: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] @scala.reflect.internal.annotations.uncheckedBounds = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    <artifact> val x$52: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$49, x$51, x$50, x$52)
  })
}))(UserRestServiceHandler.this.system.dispatcher).flatten[akka.http.scaladsl.model.HttpResponse](scala.Predef.$conforms[scala.concurrent.Future[akka.http.scaladsl.model.HttpResponse]])

